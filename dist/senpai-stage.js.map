{"version":3,"file":"senpai-stage.js","sources":["../src/ease/consts.ts","../src/ease/index.ts","../src/matrix/index.ts","../src/spritesheet/index.ts","../src/util/index.ts","../src/events/SenpaiEvent.ts","../src/view/Sprite.ts","../src/view/Button.ts","../src/view/Character.ts","../src/view/Checkbox.ts","../src/view/Close.ts","../src/view/Container.ts","../src/view/InteractionManager.ts","../src/view/Label.ts","../src/view/Panel.ts","../src/view/SFXSprite.ts","../src/view/Slider.ts","../src/view/Stage.ts","../src/view/Textbox.ts","../src/view/TextInput.ts"],"sourcesContent":["export const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\n","/****\r\n * Custom ease functions, designed with functional programming concepts.\r\n */\r\nimport { PI, TAU } from \"./consts\";\r\n\r\nexport type EaseFunc = (ratio: number) => number;\r\n\r\nfunction inverse(inFunc: EaseFunc): EaseFunc {\r\n  return function outFunc(ratio: number): number {\r\n    return 1 - inFunc(1 - ratio);\r\n  };\r\n}\r\n\r\nfunction inOut(inFunc: EaseFunc): EaseFunc {\r\n  const outFunc = inverse(inFunc);\r\n  return (ratio: number): number => ratio < 0.5\r\n    ? 0.5 * inFunc(ratio * 2)\r\n    : 0.5 + 0.5 * outFunc(2 * ratio - 1);\r\n}\r\n\r\nexport const easeLinear: EaseFunc = function linear(ratio: number): number {\r\n  return ratio;\r\n};\r\n\r\nexport const easeInQuad: EaseFunc = (ratio: number): number => ratio * ratio;\r\nexport const easeOutQuad: EaseFunc = inverse(easeInQuad);\r\nexport const easeInOutQuad: EaseFunc = inOut(easeInQuad);\r\n\r\nexport const easeInCub: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio;\r\nexport const easeOutCub: EaseFunc = inverse(easeInCub);\r\nexport const easeInOutCub: EaseFunc = inOut(easeInCub);\r\n\r\nexport const easeInQuart: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio;\r\nexport const easeOutQuart: EaseFunc = inverse(easeInQuart);\r\nexport const easeInOutQuart: EaseFunc = inOut(easeInQuart);\r\n\r\nexport const easeInQuint: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio * ratio;\r\nexport const easeOutQuint: EaseFunc = inverse(easeInQuint);\r\nexport const easeInOutQuint: EaseFunc = inOut(easeInQuint);\r\n\r\nexport const easeOutSin: EaseFunc =\r\n  (ratio: number): number => Math.sin(ratio * PI * 0.5);\r\nexport const easeInSin: EaseFunc = inverse(easeOutSin);\r\nexport const easeInOutSin: EaseFunc = inOut(easeInSin);\r\n\r\nconst p = 0.3;\r\nexport const easeOutElastic: EaseFunc =\r\n  (ratio: number): number => Math.pow(2, -10 * ratio) * Math.sin((ratio - p / 4) * TAU / p) + 1;\r\nexport const easeInElastic: EaseFunc = inverse(easeOutElastic);\r\nexport const easeInOutElastic: EaseFunc = inOut(easeInElastic);\r\n","import { IInteractionPoint } from \"../util\";\r\n\r\nexport type CanvasMatrix2D = [number, number, number, number, number, number];\r\n\r\nexport class CanvasMatrix2DTransformAPI {\r\n  public value: CanvasMatrix2D = null;\r\n  constructor(input: CanvasMatrix2D) {\r\n    this.value = input;\r\n  }\r\n\r\n  public translate(x: number, y: number): this {\r\n    this.value[4] += this.value[0] * x + this.value[2] * y;\r\n    this.value[5] += this.value[1] * x + this.value[3] * y;\r\n    return this;\r\n  }\r\n\r\n  public scale(x: number, y: number): this {\r\n    this.value[0] *= x;\r\n    this.value[1] *= x;\r\n    this.value[2] *= y;\r\n    this.value[3] *= y;\r\n    return this;\r\n  }\r\n\r\n  public rotate(radians: number) {\r\n    const cos = Math.cos(radians);\r\n    const sin = Math.sin(radians);\r\n    const a = this.value[0];\r\n    const b = this.value[1];\r\n    const c = this.value[2];\r\n    const d = this.value[3];\r\n\r\n    this.value[0] = a * cos + c * sin;\r\n    this.value[1] = b * cos + d * sin;\r\n    this.value[2] = c * cos - a * sin;\r\n    this.value[3] = d * cos - b * sin;\r\n\r\n    return this;\r\n  }\r\n\r\n  public skewX(radians: number): this {\r\n    const tan = Math.tan(radians);\r\n    this.value[2] += this.value[0] * tan;\r\n    this.value[3] += this.value[1] * tan;\r\n    return this;\r\n  }\r\n\r\n  public skewY(radians: number): this {\r\n    const tan = Math.tan(radians);\r\n    this.value[0] += this.value[2] * tan;\r\n    this.value[1] += this.value[3] * tan;\r\n    return this;\r\n  }\r\n\r\n  public inverse(): this {\r\n    const a: number = this.value[0];\r\n    const b: number = this.value[1];\r\n    const c: number = this.value[2];\r\n    const d: number = this.value[3];\r\n    const e: number = this.value[4];\r\n    const f: number = this.value[5];\r\n    const det: number = 1 / (a * d - c * b);\r\n\r\n    this.value[0] = d * det;\r\n    this.value[1] = -b * det;\r\n    this.value[2] = -c * det;\r\n    this.value[3] = a * det;\r\n    this.value[4] = (c * f - e * d) * det;\r\n    this.value[5] = (e * b - a * f) * det;\r\n    return this;\r\n  }\r\n\r\n  public transform(props: CanvasMatrix2D): this {\r\n    // props values\r\n    const pa = props[0];\r\n    const pb = props[1];\r\n    const pc = props[2];\r\n    const pd = props[3];\r\n    const pe = props[4];\r\n    const pf = props[5];\r\n\r\n    // matrix values\r\n    const ma = this.value[0];\r\n    const mb = this.value[1];\r\n    const mc = this.value[2];\r\n    const md = this.value[3];\r\n    const me = this.value[4];\r\n    const mf = this.value[5];\r\n\r\n    this.value[0] = ma * pa + mc * pb;\r\n    this.value[1] = mb * pa + md * pb;\r\n    this.value[2] = ma * pc + mc * pd;\r\n    this.value[3] = mb * pc + md * pd;\r\n    this.value[4] = ma * pe + mc * pf + me;\r\n    this.value[5] = mb * pe + md * pf + mf;\r\n    return this;\r\n  }\r\n\r\n  public reset(): this {\r\n    this.value[0] = 1;\r\n    this.value[1] = 0;\r\n    this.value[2] = 0;\r\n    this.value[3] = 1;\r\n    this.value[4] = 0;\r\n    this.value[5] = 0;\r\n    return this;\r\n  }\r\n\r\n  public set(props: CanvasMatrix2D): this {\r\n    this.value[0] = props[0];\r\n    this.value[1] = props[1];\r\n    this.value[2] = props[2];\r\n    this.value[3] = props[3];\r\n    this.value[4] = props[4];\r\n    this.value[5] = props[5];\r\n    return this;\r\n  }\r\n\r\n  public setTo(target: CanvasMatrix2D): this {\r\n    target[0] = this.value[0];\r\n    target[1] = this.value[1];\r\n    target[2] = this.value[2];\r\n    target[3] = this.value[3];\r\n    target[4] = this.value[4];\r\n    target[5] = this.value[5];\r\n    return this;\r\n  }\r\n}\r\n\r\nexport const Identity: CanvasMatrix2D = [1, 0, 0, 1, 0, 0];\r\n\r\nexport function transformCopy2D(input: CanvasMatrix2D): CanvasMatrix2DTransformAPI {\r\n  return transform2D(input.slice() as CanvasMatrix2D);\r\n}\r\n\r\nexport function transform2D(input: CanvasMatrix2D): CanvasMatrix2DTransformAPI {\r\n  return new CanvasMatrix2DTransformAPI(input);\r\n}\r\n\r\nexport function transformPoint(point: IInteractionPoint, matrix: CanvasMatrix2D): void {\r\n  point.tx = matrix[0] * point.x + matrix[2] * point.y + matrix[4];\r\n  point.ty = matrix[1] * point.x + matrix[3] * point.y + matrix[5];\r\n}\r\n\r\nconst radFactor: number = Math.PI / 180;\r\nexport function rads(degrees: number): number {\r\n  const normalized = normalize(degrees, 360);\r\n  return normalized * radFactor;\r\n}\r\n\r\nconst degFactor: number = 1 / radFactor;\r\nconst PI_2: number = Math.PI * 2;\r\nexport function degs(radians: number): number {\r\n  const normalized = normalize(radians, PI_2);\r\n  return normalized * degFactor;\r\n}\r\n\r\nfunction normalize(input: number, factor: number): number {\r\n  return ((input % factor) + factor) % factor;\r\n}\r\n","export interface ISpriteSheet {\r\n  kind: SpriteSheetKind;\r\n}\r\n\r\nexport enum SpriteSheetKind {\r\n  JSON,\r\n  JSON_TP_Hash,\r\n  JSON_TP_Array,\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetSizeShort {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSizeShort;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetJSONHash extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Hash;\r\n  frames: {\r\n    [frame: string]: {\r\n      frame: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n      rotated: boolean;\r\n      trimmed: boolean;\r\n      spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n      sourceSize: ISpriteSheetSizeShort;\r\n    };\r\n  };\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport interface ISpriteSheetFileName {\r\n  filename: string;\r\n}\r\n\r\nexport interface ISpriteSheetJSONArray extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Array;\r\n  frames: Array<{\r\n    filename: string;\r\n    frame: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n    rotated: boolean;\r\n    trimmed: boolean;\r\n    spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n    sourceSize: ISpriteSheetSizeShort;\r\n  }>;\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport type ISpriteSheetJSON = Array<{\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}> & {\r\n  kind: SpriteSheetKind.JSON;\r\n};\r\n\r\nexport async function loadSpriteSheet(url: string | Request, opts?: RequestInit): Promise<ISpriteSheet> {\r\n  const resp = await fetch(url, opts);\r\n  const definition = await resp.json();\r\n  return createSpriteSheet(definition);\r\n}\r\n\r\nexport function createSpriteSheet(definition: any): ISpriteSheet {\r\n  if (Array.isArray(definition)) {\r\n    const result: ISpriteSheetJSON = definition as ISpriteSheetJSON;\r\n    result.kind = SpriteSheetKind.JSON;\r\n    return result;\r\n  }\r\n  if (!definition.frames) {\r\n    throw new Error(\"Invalid spritesheet format.\");\r\n  }\r\n  if (Array.isArray(definition.frames)) {\r\n    const result: ISpriteSheetJSONArray = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Array,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  } else {\r\n    const result: ISpriteSheetJSONHash = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Hash,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ITextureMap {\r\n  [texture: string]: ImageBitmap;\r\n}\r\n\r\nexport async function createTextureMap(definitionPromise: Promise<ISpriteSheet>, imgPromise: Promise<ImageBitmap>) {\r\n  const textures: ITextureMap = {};\r\n  const definition = await definitionPromise;\r\n  const img = await imgPromise;\r\n  switch (definition.kind) {\r\n    case SpriteSheetKind.JSON:\r\n      const jsonKind: ISpriteSheetJSON = definition as ISpriteSheetJSON;\r\n      for (const frame of jsonKind) {\r\n        textures[frame.name] = await createImageBitmap(\r\n          img,\r\n          frame.x,\r\n          frame.y,\r\n          frame.width,\r\n          frame.height,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Array:\r\n      const spritesheetArrayKind: ISpriteSheetJSONArray = definition as ISpriteSheetJSONArray;\r\n      for (const arrayFrame of spritesheetArrayKind.frames) {\r\n        textures[arrayFrame.filename] = await createImageBitmap(\r\n          img,\r\n          arrayFrame.frame.x,\r\n          arrayFrame.frame.y,\r\n          arrayFrame.frame.w,\r\n          arrayFrame.frame.h,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Hash:\r\n      const spritesheetHashKind: ISpriteSheetJSONHash = definition as ISpriteSheetJSONHash;\r\n      for (const frame of Object.keys(spritesheetHashKind.frames)) {\r\n        const spriteFrame = spritesheetHashKind.frames[frame];\r\n        textures[frame] = await createImageBitmap(\r\n          img,\r\n          spriteFrame.frame.x,\r\n          spriteFrame.frame.y,\r\n          spriteFrame.frame.w,\r\n          spriteFrame.frame.h,\r\n        );\r\n      }\r\n      break;\r\n  }\r\n  return textures;\r\n}\r\n\r\nexport async function loadImage(url: string | Request, opts?: RequestInit): Promise<ImageBitmap> {\r\n  const res = await fetch(url, opts);\r\n  const blob = await res.blob();\r\n  return createImageBitmap(blob);\r\n}\r\n","import { ISprite } from \"../view/Sprite\";\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrameMap {\r\n  [frame: string]: ISpriteSheetFrame;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSize;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrame {\r\n  frame: ISpriteSheetPoint & ISpriteSheetSize;\r\n  rotated: boolean;\r\n  trimmed: boolean;\r\n  spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSize;\r\n  sourceSize: ISpriteSheetSize;\r\n}\r\n\r\nexport interface ISpriteSheetSize {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IInteractionPoint extends IPoint {\r\n  id: string;\r\n  type: \"Touch\" | \"Mouse\";\r\n  down: boolean;\r\n  clicked: boolean;\r\n  captured: boolean;\r\n  active: ISprite;\r\n  hover: ISprite;\r\n  firstDown: boolean;\r\n  tx: number;\r\n  ty: number;\r\n}\r\n\r\nexport interface IPlayable {\r\n  id: string;\r\n  started: number; // timestamp when the media last began playing\r\n  length: number; // media play length timespan\r\n  start: number; // media start time\r\n  end: number; // media end time\r\n  loop: boolean; // does this media loop?\r\n  state: PlayState; // self explainatory\r\n  loaded: Promise<void>; // this should be a promise that resolves once the audio has loaded\r\n  play(): this;\r\n  pause(): this;\r\n  stop(): this;\r\n  setVolume(volume: number); // accepts number [0. 1]\r\n}\r\n\r\nexport interface IAudio extends IPlayable {\r\n  gain: GainNode; // controls volume\r\n  source: AudioBuffer; // is null until the audioBuffer is loaded\r\n  destination: AudioNode;\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n}\r\n\r\nexport interface ISoundSpriteSheet {\r\n  resources: string[];\r\n  spritemap: {\r\n    [name: string]: ISoundSpriteSheetTexture;\r\n  };\r\n}\r\n\r\nexport interface ISoundSpriteSheetTexture {\r\n  start: number;\r\n  end: number;\r\n  loop: boolean;\r\n}\r\n\r\nexport interface IAudioProps extends IPlayableProps {\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n  name: string; // determines the name of the audio clip\r\n}\r\n\r\nexport interface IPlayableProps {\r\n  id: string;\r\n  source: Promise<Response>;\r\n  texture: string; // this should be name of the texture in the spritesheet\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IPadding {\r\n  left: number;\r\n  right: number;\r\n  top: number;\r\n  bottom: number;\r\n}\r\n\r\n/**\r\n * Sort by z level in ascending order.\r\n */\r\nexport function zSort(left: ISprite, right: ISprite): number {\r\n  return left.z - right.z;\r\n}\r\n\r\nexport enum TextAlign {\r\n  \"left\" = \"left\",\r\n  \"right\" = \"right\",\r\n  \"center\" = \"center\",\r\n  \"start\" = \"start\",\r\n  \"end\" = \"end\",\r\n}\r\n\r\nexport enum TextBaseline {\r\n  \"top\" = \"top\",\r\n  \"hanging\" = \"hanging\",\r\n  \"middle\" = \"middle\",\r\n  \"alphabetic\" = \"alphabetic\",\r\n  \"ideographic\" = \"ideographic\",\r\n  \"bottom\" = \"bottom\",\r\n}\r\n\r\nexport enum PlayState {\r\n  Playing,\r\n    Paused,\r\n    Stopped,\r\n}\r\n\r\nexport enum Cursor {\r\n  \"auto\" = \"auto\",\r\n \"default\" = \"default\",\r\n  \"none\" = \"none\",\r\n  \"context-menu\" = \"context-menu\",\r\n  \"help\" = \"help\",\r\n  \"pointer\" = \"pointer\",\r\n  \"progress\" = \"progress\",\r\n  \"wait\" = \"wait\",\r\n  \"cell\" = \"cell\",\r\n  \"crosshair\" = \"crosshair\",\r\n  \"text\" = \"text\",\r\n  \"vertical-text\" = \"vertical-text\",\r\n  \"alias\" = \"alias\",\r\n  \"copy\" = \"copy\",\r\n  \"move\" = \"move\",\r\n  \"no-drop\" = \"no-drop\",\r\n  \"not-allowed\" = \"not-allowed\",\r\n  \"e-resize\" = \"e-resize\",\r\n  \"n-resize\" = \"n-resize\",\r\n  \"ne-resize\" = \"ne-resize\",\r\n  \"nw-resize\" = \"nw-resize\",\r\n  \"s-resize\" = \"s-resize\",\r\n  \"se-resize\" = \"se-resize\",\r\n  \"sw-resize\" = \"sw-resize\",\r\n  \"w-resize\" = \"w-resize\",\r\n  \"ew-resize\" = \"ew-resize\",\r\n  \"ns-resize\" = \"ns-resize\",\r\n  \"nesw-resize\" = \"nesw-resize\",\r\n  \"nwse-resize\" = \"nwse-resize\",\r\n  \"col-resize\" = \"col-resize\",\r\n  \"row-resize\" = \"row-resize\",\r\n  \"all-scroll\" = \"all-scroll\",\r\n  \"zoom-in\" = \"zoom-in\",\r\n  \"zoom-out\" = \"zoom-out\",\r\n  \"grab\" = \"grab\",\r\n  \"grabbing\" = \"grabbing\",\r\n}\r\n\r\nexport interface ISpritePosition {\r\n  x?: number;\r\n  y?: number;\r\n  s: number;\r\n  sx?: number;\r\n  sy?: number;\r\n  r?: number;\r\n  cx?: number;\r\n  cy?: number;\r\n}\r\n\r\nexport enum SpriteType {\r\n  Button,\r\n  Character,\r\n  Checkbox,\r\n  Close,\r\n  Label,\r\n  Panel,\r\n  Slider,\r\n  Textbox,\r\n  TextInput,\r\n  Sprite,\r\n}\r\n","import { IContainer } from \"../view/Container\";\r\nimport { IInteractionManager } from \"../view/InteractionManager\";\r\nimport { ISprite } from \"../view/Sprite\";\r\n\r\nexport type EventCallback<T> = (events: T) => void;\r\n\r\nexport interface ISenpaiEvent {\r\n  eventType: string;\r\n  stage: IContainer;\r\n  source: ISprite | IInteractionManager;\r\n}\r\n\r\nexport interface IValueChangeEvent<T> extends ISenpaiEvent {\r\n  eventType: \"ValueChange\";\r\n  property: string;\r\n  value: T;\r\n  previousValue: T;\r\n}\r\n\r\nexport interface IDisposer {\r\n  dispose: () => void;\r\n}\r\n\r\nexport class EventEmitter<T extends ISenpaiEvent> {\r\n  public callbacks: Array<EventCallback<T>> = [];\r\n  public clear() {\r\n    this.callbacks = [];\r\n  }\r\n  public listen(callback: EventCallback<T>): IDisposer {\r\n    this.callbacks.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        if (this.callbacks.includes(callback)) {\r\n          this.callbacks.splice(\r\n            this.callbacks.indexOf(callback),\r\n            1,\r\n          );\r\n        }\r\n      },\r\n    };\r\n  }\r\n  public promise(): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      const disposer = this.listen((event) => {\r\n        disposer.dispose();\r\n        resolve(event);\r\n      });\r\n    });\r\n  }\r\n  public once(callback: EventCallback<T>): IDisposer {\r\n    const disposer = this.listen((events: T) => {\r\n      callback(events);\r\n      disposer.dispose();\r\n    });\r\n    return disposer;\r\n  }\r\n\r\n  public emit(events: T): void {\r\n    for (const callback of this.callbacks.slice()) {\r\n      callback(events);\r\n    }\r\n  }\r\n}\r\n","import * as eases from \"../ease\";\r\nimport {\r\n  EventEmitter,\r\n  IKeyDownEvent,\r\n  IKeyUpEvent,\r\n  IPointClickEvent,\r\n  IPointDownEvent,\r\n  IPointEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  IValueChangeEvent,\r\n} from \"../events\";\r\nimport { ISpriteLoadedEvent } from \"../events/SpriteEvents\";\r\nimport { CanvasMatrix2D, Identity, transform2D, transformCopy2D, transformPoint } from \"../matrix\";\r\nimport { createTextureMap, ISpriteSheet, ITextureMap, loadImage, loadSpriteSheet } from \"../spritesheet\";\r\nimport { Cursor, IInteractionPoint, ISize, ISpritePosition, SpriteType } from \"../util\";\r\nimport { IContainer } from \"./Container\";\r\n\r\n// import { IStage } from \"./Stage\";\r\n\r\nexport interface ISprite extends ISize {\r\n  id: string;\r\n  parent: ISprite;\r\n  container: IContainer;\r\n  readonly type: SpriteType;\r\n\r\n  // position\r\n  previousPosition: CanvasMatrix2D;\r\n  position: CanvasMatrix2D;\r\n  inverse: CanvasMatrix2D;\r\n  alpha: number;\r\n  interpolatedAlpha: number;\r\n  previousAlpha: number;\r\n  z: number;\r\n\r\n  // animation\r\n  textures: ITextureMap;\r\n  lastInterpolated: number;\r\n  interpolatedPosition: CanvasMatrix2D;\r\n  animationStart: number;\r\n  animationLength: number;\r\n  wait: number;\r\n  // stage properties\r\n\r\n  active: boolean;\r\n  hover: boolean;\r\n  down: boolean;\r\n  focused: boolean;\r\n  tabIndex: number;\r\n\r\n  cursor: Cursor;\r\n  loaded: Promise<void>;\r\n\r\n  texture: string;\r\n\r\n  // events\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointDownEvent: EventEmitter<IPointEvent>;\r\n  pointClickEvent: EventEmitter<IPointClickEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n  loadedEvent: EventEmitter<ISpriteLoadedEvent>;\r\n\r\n  textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;\r\n\r\n  // this is set by the over function\r\n  ease(ratio: number): number;\r\n\r\n  broadPhase(point: IInteractionPoint): boolean;\r\n  narrowPhase(point: IInteractionPoint): ISprite;\r\n  isHovering(point: IInteractionPoint, now: number): ISprite;\r\n  pointCollision(point: IInteractionPoint): boolean;\r\n  setTexture(texture: string): this;\r\n  over(timespan: number, wait: number, ease: (ratio: number) => number): this;\r\n  movePosition(position: ISpritePosition): this;\r\n  move(position: CanvasMatrix2D): this;\r\n  setZ(z: number): this;\r\n  setAlpha(alpha: number): this;\r\n  interpolate(now: number): void;\r\n  skipAnimation(now: number): boolean;\r\n  update(): void;\r\n  render(ctx: CanvasRenderingContext2D): void;\r\n}\r\n\r\nexport interface ISpriteProps {\r\n  id: string;\r\n  position: CanvasMatrix2D;\r\n  textures?: ITextureMap;\r\n  alpha?: number;\r\n  z?: number;\r\n  source: Promise<ImageBitmap>;\r\n  definition: Promise<ISpriteSheet>;\r\n}\r\n\r\nexport class Sprite implements ISprite {\r\n  public id: string = \"\";\r\n  public type: SpriteType = SpriteType.Sprite;\r\n  public position: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public previousPosition: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public interpolatedPosition: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public inverse: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public alpha: number = 1;\r\n  public interpolatedAlpha: number = 1;\r\n  public previousAlpha: number = 1;\r\n  public z: number = 0;\r\n  public parent: ISprite = null;\r\n  public container: IContainer = null;\r\n  public wait: number = 0;\r\n\r\n  public lastInterpolated: number = 0;\r\n  public animationStart: number = 0;\r\n  public ease = eases.easeLinear;\r\n  public cursor: Cursor = Cursor.auto;\r\n  public animationLength: number = 0;\r\n  public active: boolean = false;\r\n  public hover: boolean = false;\r\n  public down: boolean = false;\r\n  public textures: ITextureMap = {};\r\n  public texture: string;\r\n  public loaded: Promise<void> = null;\r\n  public focused: boolean = false;\r\n  public tabIndex: number = 0;\r\n\r\n  public width: number = 0;\r\n  public height: number = 0;\r\n\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n  public pointClickEvent: EventEmitter<IPointClickEvent> = new EventEmitter<IPointClickEvent>();\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n  public loadedEvent: EventEmitter<ISpriteLoadedEvent> = new EventEmitter<ISpriteLoadedEvent>();\r\n\r\n  public textureChangeEvent: EventEmitter<IValueChangeEvent<string>> = new EventEmitter<IValueChangeEvent<string>>();\r\n\r\n  constructor(props: ISpriteProps) {\r\n    this.id = props.id;\r\n    const position: CanvasMatrix2D = props.position || Identity.slice() as CanvasMatrix2D;\r\n    this.textures = props.textures ? props.textures : this.textures;\r\n    transform2D(this.position)\r\n      .set(position);\r\n    transform2D(this.previousPosition)\r\n      .set (position);\r\n    transform2D(this.interpolatedPosition)\r\n      .set(position);\r\n\r\n    if (props.hasOwnProperty(\"alpha\")) {\r\n      this.previousAlpha = this.alpha = this.interpolatedAlpha = props.alpha;\r\n    }\r\n    if (props.hasOwnProperty(\"z\")) {\r\n      this.z = props.z;\r\n    }\r\n    if (props.source && props.definition) {\r\n      this.loadTexture(\r\n        props.definition,\r\n        props.source,\r\n      );\r\n    }\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    return point.tx >= 0 && point.tx <= this.width && point.ty >= 0 && point.ty <= this.height;\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    return true;\r\n  }\r\n\r\n  public isHovering(point: IInteractionPoint, now: number): ISprite {\r\n    this.interpolate(now);\r\n\r\n    transformPoint(point, this.inverse);\r\n    if (this.broadPhase(point)) {\r\n      return this.narrowPhase(point);\r\n    }\r\n  }\r\n\r\n  public movePosition(position: ISpritePosition): this {\r\n    const sx = position.sx || position.sx === 0 ? position.sx : position.s;\r\n    const sy = position.sy || position.sy === 0 ? position.sy : position.s;\r\n\r\n    return this.move(\r\n      transformCopy2D(Identity)\r\n        .translate(position.x || 0, position.y || 0)\r\n        .rotate(position.r || 0)\r\n        .scale(sx === 0 ? 0 : sx || 1, sy === 0 ? 0 : sy || 1)\r\n        .translate(position.cx ? -position.cx : 0, position.cy ? -position.cy : 0)\r\n        .value,\r\n    );\r\n  }\r\n\r\n  public move(position: number[] | Float64Array): this {\r\n    this.previousPosition[0] = this.interpolatedPosition[0];\r\n    this.previousPosition[1] = this.interpolatedPosition[1];\r\n    this.previousPosition[2] = this.interpolatedPosition[2];\r\n    this.previousPosition[3] = this.interpolatedPosition[3];\r\n    this.previousPosition[4] = this.interpolatedPosition[4];\r\n    this.previousPosition[5] = this.interpolatedPosition[5];\r\n\r\n    this.position[0] = position[0];\r\n    this.position[1] = position[1];\r\n    this.position[2] = position[2];\r\n    this.position[3] = position[3];\r\n    this.position[4] = position[4];\r\n    this.position[5] = position[5];\r\n    return this;\r\n  }\r\n\r\n  public setAlpha(alpha: number): this {\r\n    this.previousAlpha = this.interpolatedAlpha;\r\n    this.alpha = alpha;\r\n    return this;\r\n  }\r\n\r\n  public setZ(z: number): this {\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  public over(timespan: number, wait: number = 0, ease: (ratio: number) => number = this.ease): this {\r\n    this.animationLength = timespan;\r\n    this.animationStart = Date.now();\r\n    this.ease = ease || this.ease;\r\n    this.wait = wait;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = now < this.animationLength + this.animationStart;\r\n    this.animationStart = now - this.animationLength;\r\n    return result;\r\n  }\r\n\r\n  public update(): void {\r\n    // No op\r\n  }\r\n  public interpolate(now: number): void {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    this.lastInterpolated = now;\r\n\r\n    const progress = now - (this.animationStart + this.wait);\r\n\r\n    const ratio = (progress >= this.animationLength)\r\n        ? 1\r\n        : (progress <= 0 ? 0 : this.ease(progress / this.animationLength));\r\n\r\n    if (ratio === 1) {\r\n      this.interpolatedPosition[0] = this.position[0];\r\n      this.interpolatedPosition[1] = this.position[1];\r\n      this.interpolatedPosition[2] = this.position[2];\r\n      this.interpolatedPosition[3] = this.position[3];\r\n      this.interpolatedPosition[4] = this.position[4];\r\n      this.interpolatedPosition[5] = this.position[5];\r\n      this.interpolatedAlpha = this.alpha;\r\n    } else if (ratio === 0) {\r\n      this.interpolatedPosition[0] = this.previousPosition[0];\r\n      this.interpolatedPosition[1] = this.previousPosition[1];\r\n      this.interpolatedPosition[2] = this.previousPosition[2];\r\n      this.interpolatedPosition[3] = this.previousPosition[3];\r\n      this.interpolatedPosition[4] = this.previousPosition[4];\r\n      this.interpolatedPosition[5] = this.previousPosition[5];\r\n      this.interpolatedAlpha = this.previousAlpha;\r\n    } else {\r\n      for (let j = 0; j < 6; j++) {\r\n        this.interpolatedPosition[j] = this.previousPosition[j]\r\n          + ratio * (this.position[j] - this.previousPosition[j]);\r\n      }\r\n      this.interpolatedAlpha = this.previousAlpha + ratio * (this.alpha - this.previousAlpha);\r\n    }\r\n\r\n    transformCopy2D(this.interpolatedPosition)\r\n      .inverse()\r\n      .setTo(this.inverse);\r\n\r\n    if (this.parent) {\r\n      // assert the parent is properly moved\r\n      this.parent.interpolate(now);\r\n\r\n      transformCopy2D(this.parent.inverse)\r\n        .transform(this.inverse)\r\n        .setTo(this.inverse);\r\n    }\r\n  }\r\n  public setTexture(texture: string): this {\r\n    const oldTexture = this.texture;\r\n    this.texture = texture;\r\n    this.width = this.textures[this.texture].width;\r\n    this.height = this.textures[this.texture].height;\r\n\r\n    if (oldTexture !== this.texture) {\r\n      // this.emit(\"texture-change\", this.texture); // TODO\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures[this.texture], 0, 0);\r\n  }\r\n\r\n  private async loadTexture(defintion: Promise<ISpriteSheet>, source: Promise<ImageBitmap>): Promise<void> {\r\n    this.textures = await createTextureMap(defintion, source);\r\n    this.loadedEvent.emit({\r\n      definition: await defintion,\r\n      eventType: \"SpriteLoaded\",\r\n      source: this,\r\n      spriteSource: await source,\r\n      stage: this.container,\r\n    });\r\n  }\r\n}\r\n","import { Cursor, SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IButton extends ISprite {\r\n  selected: boolean;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  text: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface IButtonProps extends ISpriteProps {\r\n  selected?: boolean;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  text?: string;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Button extends Sprite implements IButton {\r\n  public readonly type: SpriteType = SpriteType.Button;\r\n  public selected: boolean = false;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public text: string =  \"\";\r\n  public textAlign: TextAlign = TextAlign.center;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n\r\n  constructor(props: IButtonProps) {\r\n    super(props);\r\n    this.selected = props.selected || false;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.text = props.text || this.text;\r\n    this.textAlign = props.textAlign;\r\n    this.textBaseline = props.textBaseline;\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const selected = this.selected ? \"Selected\" : \"Unselected\";\r\n    this.setTexture(`${active}_${hover}_${selected}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.textures[this.texture].width * 0.5, this.textures[this.texture].height * 0.5);\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    ctx.textAlign = TextAlign.center;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICharacterProps extends ISpriteProps {\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport interface ICharacter extends ISprite {\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport class Character extends Sprite implements ICharacter {\r\n  public readonly type: SpriteType = SpriteType.Character;\r\n  public name: string = \"\";\r\n  public displayName: string = \"\";\r\n  public color: string = \"\";\r\n  constructor(props: ICharacterProps) {\r\n    super(props);\r\n    this.displayName = props.displayName;\r\n    this.color = props.color;\r\n  }\r\n}\r\n","\r\nimport { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport {\r\n\r\n  Cursor,\r\n  IInteractionPoint,\r\n  SpriteType,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICheckbox extends ISprite {\r\n  checked: boolean;\r\n  text: string;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  checkedChangeEvent: EventEmitter<IValueChangeEvent<boolean>>;\r\n\r\n  setText(text: string): this;\r\n  toggle(): this;\r\n}\r\n\r\nexport interface ICheckboxProps extends ISpriteProps {\r\n  checked?: boolean;\r\n  text?: string;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Checkbox extends Sprite implements ICheckbox {\r\n  public readonly type: SpriteType = SpriteType.Checkbox;\r\n  public checked: boolean = false;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n  public checkedChangeEvent: EventEmitter<IValueChangeEvent<boolean>> = new EventEmitter<IValueChangeEvent<boolean>>();\r\n\r\n  constructor(props: ICheckboxProps) {\r\n    super(props);\r\n    this.checked = Boolean(props.checked) || false;\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n  }\r\n\r\n  public toggle(): this {\r\n    const previousValue = this.checked;\r\n    this.checked = !this.checked;\r\n    this.checkedChangeEvent.emit({\r\n      eventType: \"ValueChange\",\r\n      previousValue,\r\n      property: \"checked\",\r\n      source: this,\r\n      stage: this.container,\r\n      value: this.checked,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    if (point.clicked && point.active === this) {\r\n      this.toggle();\r\n    }\r\n    return super.pointCollision(point);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.width * 1.1, this.height / 2);\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const checked = this.checked ? \"Checked\" : \"Unchecked\";\r\n    this.setTexture(`${active}_${hover}_${checked}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { Cursor, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IClose extends ISprite {\r\n\r\n}\r\n\r\nexport interface ICloseProps extends ISpriteProps {\r\n\r\n}\r\n\r\nexport class Close extends Sprite implements IClose {\r\n  public readonly type: SpriteType = SpriteType.Close;\r\n\r\n  constructor(props: ICloseProps) {\r\n    super(props);\r\n  }\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    this.setTexture(`${active}_${hover}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n}\r\n","import { IInteractionPoint, IPlayable } from \"../util\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IContainer {\r\n  sprites: ISprite[];\r\n  playables: IPlayable[];\r\n  points: IInteractionPoint[];\r\n  audioContext: AudioContext;\r\n\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  addPlayable(sprite: IPlayable): this;\r\n  removePlayable(sprite: IPlayable): this;\r\n  addPoint(point: IInteractionPoint): this;\r\n  removePoint(point: IInteractionPoint): this;\r\n  getSpriteByID(id: string): ISprite | null;\r\n  getPlayableByID(id: string): IPlayable | null;\r\n  getPointByID(id: string): IInteractionPoint | null;\r\n}\r\n\r\nexport interface IContainerProps {\r\n  audioContext: AudioContext;\r\n}\r\n\r\nexport class Container implements IContainer {\r\n\r\n  public sprites: ISprite[] = [];\r\n  public playables: IPlayable[] = [];\r\n  public points: IInteractionPoint[] = [];\r\n  public audioContext: AudioContext = null;\r\n\r\n  constructor(props: IContainerProps) {\r\n    this.audioContext = props.audioContext || new AudioContext();\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    if (!this.sprites.includes(sprite)) {\r\n      this.sprites.push(sprite);\r\n      sprite.container = this;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.container = null;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPlayable(sprite: IPlayable): this {\r\n    if (!this.playables.includes(sprite)) {\r\n      this.playables.push(sprite);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.connect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePlayable(sprite: IPlayable): this {\r\n    if (this.playables.includes(sprite)) {\r\n      this.playables.splice(this.playables.indexOf(sprite), 1);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.disconnect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPoint(point: IInteractionPoint): this {\r\n    if (!this.points.includes(point)) {\r\n      this.points.push(point);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePoint(point: IInteractionPoint): this {\r\n    if (this.points.includes(point)) {\r\n      this.points.splice(this.points.indexOf(point), 1);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public getSpriteByID(id: string): ISprite {\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getPointByID(id: string): IInteractionPoint {\r\n    for (const sprite of this.points) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getPlayableByID(id: string): IPlayable {\r\n    for (const sprite of this.playables) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IKeyDownEvent,\r\n  IKeyUpEvent,\r\n  IMouseDownEvent,\r\n  IMouseMoveEvent,\r\n  IMouseUpEvent,\r\n  IPointDownEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  ITouchCancelEvent,\r\n  ITouchEndEvent,\r\n  ITouchMoveEvent,\r\n  ITouchStartEvent,\r\n} from \"../events\";\r\nimport { IInteractionPoint, SpriteType, zSort } from \"../util\";\r\nimport { Container, IContainer, IContainerProps } from \"./Container\";\r\nimport { IPanel } from \"./Panel\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\ninterface IInteractionPointIndex {\r\n  [id: number]: IInteractionPoint;\r\n}\r\n\r\ninterface IKeyIndex {\r\n  [key: string]: boolean;\r\n}\r\n\r\nexport interface IInteractionManager extends IContainer {\r\n  canvas: HTMLCanvasElement;\r\n  mousePoint: IInteractionPoint;\r\n  touchPointIndex: IInteractionPointIndex;\r\n  keyIndex: IKeyIndex;\r\n\r\n  pointDownEvent: EventEmitter<IPointDownEvent>;\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n\r\n  mouseDownEvent: EventEmitter<IMouseDownEvent>;\r\n  mouseUpEvent: EventEmitter<IMouseUpEvent>;\r\n  mouseMoveEvent: EventEmitter<IMouseMoveEvent>;\r\n\r\n  touchCancelEvent: EventEmitter<ITouchCancelEvent>;\r\n  touchEndEvent: EventEmitter<ITouchEndEvent>;\r\n  touchMoveEvent: EventEmitter<ITouchMoveEvent>;\r\n  touchStartEvent: EventEmitter<ITouchStartEvent>;\r\n\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n\r\n  hookEvents(): void;\r\n  dispose(): void;\r\n  createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint;\r\n  addTouchPoint(touch: Touch): IInteractionPoint;\r\n  removeTouchPoint(touch: Touch): void;\r\n  pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n\r\n  // high level events\r\n  mouseDown(event: MouseEvent): void;\r\n  mouseUp(event: MouseEvent): void;\r\n  mouseMove(event: MouseEvent): void;\r\n  touchStart(event: TouchEvent): void;\r\n  touchEnd(event: TouchEvent): void;\r\n  touchMove(event: TouchEvent): void;\r\n  touchCancel(event: TouchEvent): void;\r\n\r\n  keyDown(event: KeyboardEvent): void;\r\n  keyUp(event: KeyboardEvent): void;\r\n\r\n  setFocus(target: ISprite): void;\r\n}\r\n\r\ninterface IInteractionPointEvent {\r\n  target: HTMLElement;\r\n  event: string;\r\n  listener: (e: MouseEvent | TouchEvent) => void;\r\n}\r\ninterface IKeyboardEvent {\r\n  target: HTMLElement;\r\n  event: string;\r\n  listener: (e: KeyboardEvent) => void;\r\n}\r\n\r\nexport interface IInteractionManagerProps extends IContainerProps {\r\n  canvas: HTMLCanvasElement;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class InteractionManager extends Container implements IInteractionManager {\r\n  public canvas: HTMLCanvasElement = null;\r\n  public ctx: CanvasRenderingContext2D = null;\r\n  public touchPointIndex: IInteractionPointIndex = {};\r\n  public keyIndex: IKeyIndex = {};\r\n  public mousePoint: IInteractionPoint = {\r\n    active: null,\r\n    captured: false,\r\n    clicked: false,\r\n    down: false,\r\n    firstDown: false,\r\n    hover: null,\r\n    id: \"mouse\",\r\n    tx: 0,\r\n    ty: 0,\r\n    type: \"Mouse\",\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n\r\n  public mouseDownEvent: EventEmitter<IMouseDownEvent> = new EventEmitter<IMouseDownEvent>();\r\n  public mouseUpEvent: EventEmitter<IMouseUpEvent> = new EventEmitter<IMouseUpEvent>();\r\n  public mouseMoveEvent: EventEmitter<IMouseMoveEvent> = new EventEmitter<IMouseMoveEvent>();\r\n\r\n  public touchCancelEvent: EventEmitter<ITouchCancelEvent> = new EventEmitter<ITouchCancelEvent>();\r\n  public touchEndEvent: EventEmitter<ITouchEndEvent> = new EventEmitter<ITouchEndEvent>();\r\n  public touchMoveEvent: EventEmitter<ITouchMoveEvent> = new EventEmitter<ITouchMoveEvent>();\r\n  public touchStartEvent: EventEmitter<ITouchStartEvent> = new EventEmitter<ITouchStartEvent>();\r\n\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n\r\n  private events: IInteractionPointEvent[] = [\r\n    { target: null, event: \"mousedown\", listener: e => this.mouseDown(e as MouseEvent) },\r\n    { target: document.body, event: \"mouseup\", listener: e => this.mouseUp(e as MouseEvent) },\r\n    { target: null, event: \"mousemove\", listener: e => this.mouseMove(e as MouseEvent) },\r\n    { target: null, event: \"touchstart\", listener: e => this.touchStart(e as TouchEvent) },\r\n    { target: document.body, event: \"touchend\", listener: e => this.touchEnd(e as TouchEvent) },\r\n    { target: null, event: \"touchmove\", listener: e => this.touchMove(e as TouchEvent) },\r\n    { target: document.body, event: \"touchcancel\", listener: e => this.touchCancel(e as TouchEvent) },\r\n  ];\r\n  private keyboardEvents: IKeyboardEvent[] = [\r\n    { target: document.body, event: \"keydown\", listener: e => this.keyDown(e as KeyboardEvent) },\r\n    { target: document.body, event: \"keyup\", listener: e => this.keyUp(e as KeyboardEvent) },\r\n  ];\r\n\r\n  constructor(props: IInteractionManagerProps) {\r\n    super(props);\r\n    this.canvas = props.canvas;\r\n    if (!this.canvas) {\r\n      this.canvas = document.createElement(\"canvas\");\r\n      document.body.appendChild(this.canvas);\r\n    }\r\n    this.canvas.width = props.width;\r\n    this.canvas.height = props.height;\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.hookEvents();\r\n    this.addPoint(this.mousePoint);\r\n  }\r\n\r\n  public hookEvents(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n    this.keyboardEvents.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public dispose(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .removeEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public mouseDown(event: MouseEvent): void {\r\n    this.mouseDownEvent.emit({\r\n      down: true,\r\n      eventType: \"MouseDown\",\r\n      rawEvent: event,\r\n      source: this,\r\n      stage: this,\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n    return this.pointDown(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseUp(event: MouseEvent): void {\r\n    return this.pointUp(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseMove(event: MouseEvent): void {\r\n    return this.pointMove(this.mousePoint, event);\r\n  }\r\n\r\n  public touchStart(event: TouchEvent): void {\r\n    let touch: Touch;\r\n    let point: IInteractionPoint;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchStartEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchStart\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.addTouchPoint(touch);\r\n      this.pointDown(point, touch);\r\n    }\r\n  }\r\n\r\n  public touchEnd(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchEndEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchEnd\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointUp(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchCancel(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchCancelEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchCancel\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: null,\r\n        y: null,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointCancel(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchMove(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchMoveEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchMove\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointMove(point, touch);\r\n    }\r\n  }\r\n  public pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const alreadyDown = point.down;\r\n    if (!alreadyDown) {\r\n      point.down = true;\r\n      point.firstDown = true;\r\n    }\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    this.pointMove(point, position);\r\n    if (alreadyDown) {\r\n      return;\r\n    }\r\n    if (point.hover) {\r\n      point.active = point.hover;\r\n      point.active.down = true;\r\n      point.active.active = true;\r\n      this.setFocus(point.hover);\r\n      point.active.pointDownEvent.emit({\r\n        down: true,\r\n        eventType: \"PointDown\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.y,\r\n      });\r\n    }\r\n    this.pointDownEvent.emit({\r\n      down: true,\r\n      eventType: \"PointDown\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: point.active,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n    point.firstDown = false; // after this point, the point will not be considered \"just recently pressed\"\r\n  }\r\n\r\n  public pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    let source: ISprite = null;\r\n    this.pointMove(point, position);\r\n    if (!point.down) {\r\n      return;\r\n    }\r\n    point.down = false;\r\n    if (point.active) {\r\n      point.active.down = false;\r\n      point.active.active = false;\r\n      point.active.pointUpEvent.emit({\r\n        down: false,\r\n        eventType: \"PointUp\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.x,\r\n      });\r\n\r\n      if (point.hover === point.active) {\r\n        point.active.pointClickEvent.emit({\r\n          down: false,\r\n          eventType: \"PointClick\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: point.active,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.x,\r\n        });\r\n      }\r\n      source = point.active;\r\n      point.active = null;\r\n    }\r\n\r\n    this.pointUpEvent.emit({\r\n      down: false,\r\n      eventType: \"PointUp\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: source || this,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.x,\r\n    });\r\n}\r\n\r\n  public pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const now = Date.now();\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    point.x = position.clientX - rect.left;\r\n    point.y = position.clientY - rect.top;\r\n\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n    // sprites sorted by ascending z level\r\n    // REASON: Higher z levels are drawn last, so forward-iterating through the\r\n    // array and drawing the sprites will yield the correct result.\r\n    this.sprites.sort(zSort);\r\n\r\n    // find the highest z level sprite the point collides with\r\n    // loop is reversed due to z levels being sorted ascendingly\r\n    let sprite: ISprite;\r\n    let hoveringSprite: ISprite;\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n      hoveringSprite = sprite.isHovering(point, now);\r\n\r\n      if (hoveringSprite) {\r\n        hoveringSprite.hover = true;\r\n        point.hover = hoveringSprite; // this can later be used by pointDown and pointUp\r\n        hoveringSprite.pointCollision(point);\r\n        hoveringSprite.pointMoveEvent.emit({\r\n          down: point.down,\r\n          eventType: \"PointMove\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: sprite,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.y,\r\n        });\r\n        break; // we've found the highest z level sprite the point collides with\r\n      }\r\n    }\r\n    this.pointMoveEvent.emit({\r\n      down: point.down,\r\n      eventType: \"PointMove\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: sprite,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n  }\r\n\r\n  public pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    if (point.active) {\r\n      point.active.active = false;\r\n      point.active = null;\r\n    }\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n  }\r\n\r\n  public createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint {\r\n    const point: IInteractionPoint = {\r\n      active: null,\r\n      captured: false,\r\n      clicked: false,\r\n      down: false,\r\n      firstDown: false,\r\n      hover: null,\r\n      id,\r\n      tx: 0,\r\n      ty: 0,\r\n      type,\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n\r\n    return point;\r\n  }\r\n\r\n  public addTouchPoint(touch: Touch): IInteractionPoint {\r\n    const point = this.createInteractionPoint(touch.identifier.toString(), \"Touch\");\r\n    this.addPoint(point);\r\n    this.touchPointIndex[touch.identifier] = point;\r\n    return point;\r\n  }\r\n\r\n  public removeTouchPoint(touch: Touch): void {\r\n    const point: IInteractionPoint = this.touchPointIndex[touch.identifier];\r\n    delete this.touchPointIndex[touch.identifier];\r\n    this.removePoint(point);\r\n  }\r\n\r\n  public hoverCheck(now: number): void {\r\n    let point: IInteractionPoint;\r\n    let sprite: ISprite;\r\n\r\n    for (point of this.points) {\r\n      if (point.hover) {\r\n        point.hover.hover = false;\r\n        point.hover = null;\r\n      }\r\n\r\n      for (sprite of this.sprites) {\r\n        if (sprite.isHovering(point, now)) {\r\n          sprite.pointCollision(point);\r\n          point.hover = sprite;\r\n          sprite.hover = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public keyUp(e: KeyboardEvent): void {\r\n    this.keyUpEvent.emit({\r\n      down: false,\r\n      eventType: \"KeyUp\",\r\n      key: e.key,\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    this.keyIndex[e.key] = false;\r\n  }\r\n\r\n  public keyDown(e: KeyboardEvent): void {\r\n    this.keyIndex[e.key] = true;\r\n    this.keyDownEvent.emit({\r\n      down: true,\r\n      eventType: \"KeyDown\",\r\n      key: e.key,\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.focused) {\r\n        sprite.keyDownEvent.emit({\r\n          down: true,\r\n          eventType: \"KeyDown\",\r\n          key: e.key,\r\n          source: sprite,\r\n          stage: this,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public setFocus(target: ISprite): void {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focused = sprite === target;\r\n      if (sprite.type === SpriteType.Panel) {\r\n        const panel = sprite as IPanel;\r\n        panel.focus(target);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ILabel extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ILabelProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class Label extends Sprite implements ILabel {\r\n  public readonly type: SpriteType = SpriteType.Label;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public textAlign: TextAlign = TextAlign.start;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n\r\n  constructor(props: ILabelProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n  }\r\n\r\n  public update(): void {\r\n    this.height = this.fontSize;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    this.width = tempctx.measureText(this.text).width;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { transformPoint } from \"../matrix\";\r\nimport { IInteractionPoint, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst sortZ = (a: ISprite, b: ISprite): number => a.z - b.z;\r\n\r\nexport interface IPanel extends ISprite {\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  focus(sprite: ISprite): void;\r\n}\r\n\r\nexport interface IPanelProps extends ISpriteProps {}\r\n\r\nexport class Panel extends Sprite implements IPanel {\r\n  public readonly type: SpriteType = SpriteType.Panel;\r\n  private sprites: ISprite[] = [];\r\n\r\n  constructor(props: IPanelProps) {\r\n    super(props);\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    sprite.parent = this;\r\n    this.sprites.push(sprite);\r\n    return this;\r\n  }\r\n\r\n  public interpolate(now: number) {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    super.interpolate(now);\r\n    for (const sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.parent = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    this.sprites.sort(sortZ);\r\n\r\n    for (const sprite of this.sprites) {\r\n      sprite.down = false;\r\n      sprite.hover = false;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    let sprite: ISprite = null;\r\n    let collision: ISprite = null;\r\n\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n\r\n      // the sprites inverse has already been calculated relative to the parent\r\n      transformPoint(point, sprite.inverse);\r\n\r\n      if (!sprite.broadPhase(point)) {\r\n        continue;\r\n      }\r\n\r\n      collision = sprite.narrowPhase(point);\r\n      if (collision) {\r\n        return collision;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public update(): void {\r\n    this.hover = false;\r\n    for (const sprite of this.sprites) {\r\n      sprite.update();\r\n\r\n      if (sprite.hover) {\r\n        this.hover = sprite.hover;\r\n        this.cursor = sprite.cursor;\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(0, 0, this.width, this.height);\r\n    ctx.clip();\r\n\r\n    for (const sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.transform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha *= sprite.interpolatedAlpha;\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  public focus(target: ISprite) {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focused = sprite === target;\r\n      if (sprite.type === SpriteType.Panel) {\r\n        const panel = sprite as IPanel;\r\n        panel.focus(target);\r\n      }\r\n    }\r\n  }\r\n  public skipAnimation(now: number): boolean {\r\n    let result: boolean = super.skipAnimation(now);\r\n    for (const sprite of this.sprites) {\r\n      result = sprite.skipAnimation(now) || result;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { IAudio, IAudioProps, ISoundSpriteSheet, PlayState } from \"../util\";\r\n\r\nexport interface ISFX extends IAudio {\r\n  loop: false; // it will always be false\r\n}\r\n\r\nexport interface ISFXProps extends IAudioProps {\r\n}\r\n\r\nexport interface ILoadSFXProps {\r\n  name: string;\r\n  texture: string;\r\n}\r\n\r\nexport class SFXSprite implements ISFX {\r\n  public id: string = \"\";\r\n  // fields from IPlayable\r\n  public started: number = 0;\r\n  public length: number = 0;\r\n  public start: number = 0;\r\n  public end: number = 0;\r\n  public loop: false = false;\r\n  public state: PlayState = PlayState.Stopped; // unused\r\n  public loaded: Promise<void>;\r\n\r\n  // fields from IAudio\r\n  public gain: GainNode;\r\n  public source: AudioBuffer;\r\n  public destination: AudioNode;\r\n  public definition: ISoundSpriteSheet;\r\n  public context: AudioContext;\r\n  /**\r\n   * 1. sets all relevant metadata properties from spritesheet\r\n   * 2. creates gain node from context\r\n   * 3. set this.loaded to result of createSource(props.source, props.context);\r\n   * 4. set this.destination\r\n   */\r\n  constructor(props: ISFXProps) {\r\n    this.id = props.id;\r\n    // TODO: 1\r\n    this.context = props.context;\r\n    this.definition = props.definition;\r\n    this.start = this.definition.spritemap[props.texture].start;\r\n    this.end = this.definition.spritemap[props.texture].end;\r\n    this.length = this.end - this.start;\r\n    this.gain = props.context.createGain();\r\n    this.loaded = this.createSource(props.source, props.context);\r\n    this.destination = props.context.destination;\r\n  }\r\n\r\n  // calls this.loaded.then(e => this.createPlayInstance());\r\n  public play(): this {\r\n    this.loaded.then(e => this.createPlayInstance());\r\n    return this;\r\n  }\r\n\r\n  // no ops\r\n  public stop(): this {\r\n    return this;\r\n  }\r\n  public pause(): this {\r\n    return this;\r\n  }\r\n\r\n  // sets the gainNode.gain.value property\r\n  // accepts [0..1]\r\n  public setVolume(volume: number): this {\r\n    if (volume < 0 || volume > 1) {\r\n      throw new Error(`setVolume() accepts a number between 0 and 1; got ${volume}.`);\r\n    }\r\n    this.gain.gain.value = volume;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 1. resolves response to arrayBuffer\r\n   * 2. creates audioBuffer\r\n   * 3. creates AudioBufferSourceNode\r\n   * 4. sets source property\r\n   */\r\n  private async createSource(res: Promise<Response>, context: AudioContext): Promise<void> {\r\n    const resp: Response = await res;\r\n    const buffer = await resp.arrayBuffer();\r\n    this.source = await context.decodeAudioData(buffer);\r\n  }\r\n\r\n  /**\r\n   * 1. creates new AudioBufferSourceNode\r\n   * 2. set node.buffer = this.source\r\n   * 3. set source metadata\r\n   * 4. connect node to destination\r\n   * 5. call start(0, offset, duration)\r\n   * 6. listen to ended event (look up the event)\r\n   * 7. clean up audio source node and disconnect it from the destination\r\n   */\r\n  private createPlayInstance(): void {\r\n    const node = this.context.createBufferSource();\r\n    node.buffer = this.source;\r\n    node.loop = this.loop; // false\r\n    // TODO: 3\r\n    node.connect(this.gain);\r\n\r\n    const now = Date.now();\r\n    node.start(0, this.start, this.length);\r\n\r\n    const gain = this.gain; // must be accessed inside of named function\r\n    node.addEventListener(\"ended\", function callback(e) {\r\n      node.disconnect(gain);\r\n      node.removeEventListener(\"ended\", callback);\r\n    });\r\n  }\r\n}\r\n","import { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport { Cursor, IInteractionPoint, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ISlider extends ISprite {\r\n  value: number;\r\n  max: number;\r\n  min: number;\r\n  width: number;\r\n\r\n  valueChangeEvent: EventEmitter<IValueChangeEvent<number>>;\r\n}\r\n\r\nexport interface ISliderProps extends ISpriteProps {\r\n  value?: number;\r\n  max?: number;\r\n  min?: number;\r\n  width: number;\r\n}\r\n\r\nexport class Slider extends Sprite implements ISlider {\r\n  public readonly type: SpriteType = SpriteType.Slider;\r\n  public value: number = 0;\r\n  public max: number = 1;\r\n  public min: number = 0;\r\n  public width: number = 100;\r\n\r\n  public valueChangeEvent: EventEmitter<IValueChangeEvent<number>> = new EventEmitter<IValueChangeEvent<number>>();\r\n\r\n  private sliderPattern: CanvasPattern = null;\r\n  private pillTexture: ImageBitmap = null;\r\n\r\n  constructor(props: ISliderProps) {\r\n    super(props);\r\n\r\n    this.height = props.textures.Pill_Hover.height;\r\n    this.width = props.width;\r\n    this.max = props.max || this.max;\r\n    this.min = props.min || this.min;\r\n    this.value = props.value || this.value;\r\n\r\n    this.sliderPattern = document\r\n      .createElement(\"canvas\")\r\n      .getContext(\"2d\")\r\n      // @ts-ignore: Dom Spec Outdated. ImageBitmap is acceptable parameter for createPattern.\r\n      .createPattern(props.textures.Line, \"repeat-x\");\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    if (this.active) {\r\n      return true;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    if (this.active || point.firstDown) {\r\n      return this;\r\n    }\r\n\r\n    /*\r\n     * NOTE: this checks if the cursor is strictly hovering over the pill\r\n     */\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    if (point.ty <= this.textures.Pill_Hover.height\r\n        && point.ty >= 0\r\n        && point.tx >= valueX\r\n        && point.tx <= valueX + this.textures.Pill_Hover.width) {\r\n        return this;\r\n      }\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    super.pointCollision(point);\r\n\r\n    if (this.active && point.active === this) {\r\n      const previousValue = this.value;\r\n      const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n      const trueTX = point.tx - this.textures.Pill_Hover.width * 0.5;\r\n      const clampedTX = Math.max(0, Math.min(trueTX, sliderDistance));\r\n      const range = this.max - this.min;\r\n\r\n      this.value = this.min + range * clampedTX / sliderDistance;\r\n      if (this.value !== previousValue) {\r\n        this.valueChangeEvent.emit({\r\n          eventType: \"ValueChange\",\r\n          previousValue,\r\n          property: \"value\",\r\n          source: this,\r\n          stage: this.container,\r\n          value: this.value,\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public update(): void {\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    this.pillTexture = this.active\r\n      ? this.textures.Pill_Active\r\n      : (this.hover ? this.textures.Pill_Hover : this.textures.Pill);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures.Line_Cap_Left, 0, 0);\r\n    ctx.drawImage(\r\n      this.textures.Line_Cap_Right,\r\n      this.width - this.textures.Line_Cap_Right.width,\r\n      0,\r\n    );\r\n    ctx.fillStyle = this.sliderPattern;\r\n    ctx.fillRect(\r\n      this.textures.Line_Cap_Left.width,\r\n      0,\r\n      this.width - this.textures.Line_Cap_Left.width - this.textures.Line_Cap_Right.width,\r\n      this.textures.Line.height,\r\n    );\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    ctx.drawImage(this.pillTexture, valueX, 0);\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IPostHoverCheckEvent,\r\n  IPostInterpolateEvent,\r\n  IPostRenderEvent,\r\n  IPostUpdateEvent,\r\n  IPreHoverCheckEvent,\r\n  IPreInterpolateEvent,\r\n  IPreRenderEvent,\r\n  IPreUpdateEvent,\r\n} from \"../events\";\r\nimport { Cursor } from \"../util\";\r\nimport { IInteractionManager, IInteractionManagerProps, InteractionManager } from \"./InteractionManager\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IStageProps extends IInteractionManagerProps {\r\n\r\n}\r\n\r\nexport interface IStage extends IInteractionManager {\r\n  postInterpolateEvent: EventEmitter<IPostInterpolateEvent>;\r\n  preInterpolateEvent: EventEmitter<IPreInterpolateEvent>;\r\n  preUpdateEvent: EventEmitter<IPreUpdateEvent>;\r\n  postUpdateEvent: EventEmitter<IPostUpdateEvent>;\r\n  preRenderEvent: EventEmitter<IPreRenderEvent>;\r\n  postRenderEvent: EventEmitter<IPostRenderEvent>;\r\n  update(): this;\r\n  render(): this;\r\n  skipAnimations(): boolean;\r\n}\r\n\r\nexport class Stage extends InteractionManager implements IStage {\r\n  public postInterpolateEvent: EventEmitter<IPostInterpolateEvent> = new EventEmitter<IPostInterpolateEvent>();\r\n  public preInterpolateEvent: EventEmitter<IPreInterpolateEvent> = new EventEmitter<IPreInterpolateEvent>();\r\n  public preHoverCheckEvent: EventEmitter<IPreHoverCheckEvent> = new EventEmitter<IPreHoverCheckEvent>();\r\n  public postHoverCheckEvent: EventEmitter<IPostHoverCheckEvent> = new EventEmitter<IPostHoverCheckEvent>();\r\n  public preUpdateEvent: EventEmitter<IPreUpdateEvent> = new EventEmitter<IPreUpdateEvent>();\r\n  public postUpdateEvent: EventEmitter<IPostUpdateEvent> = new EventEmitter<IPostUpdateEvent>();\r\n  public preRenderEvent: EventEmitter<IPreRenderEvent> = new EventEmitter<IPreRenderEvent>();\r\n  public postRenderEvent: EventEmitter<IPostRenderEvent> = new EventEmitter<IPostRenderEvent>();\r\n\r\n  constructor(props: IStageProps) {\r\n    super(props);\r\n  }\r\n  public update(): this {\r\n    const now = Date.now();\r\n    let sprite: ISprite;\r\n\r\n    this.preInterpolateEvent.emit({\r\n      eventType: \"PreInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    for (sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n    this.postInterpolateEvent.emit({\r\n      eventType: \"PostInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preHoverCheckEvent.emit({\r\n      eventType: \"PreHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    this.hoverCheck(now);\r\n    this.postHoverCheckEvent.emit({\r\n      eventType: \"PostHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preUpdateEvent.emit({\r\n      eventType: \"PreUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    for (sprite of this.sprites) {\r\n      sprite.update();\r\n    }\r\n\r\n    this.postUpdateEvent.emit({\r\n      eventType: \"PostUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(): this {\r\n    this.preRenderEvent.emit({\r\n      eventType: \"PreRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    let sprite: ISprite;\r\n    let pointer: Cursor = Cursor.auto;\r\n    const ctx = this.ctx;\r\n\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    for (sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.setTransform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha = sprite.interpolatedPosition[6];\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n      pointer = (sprite.hover && sprite.cursor) || pointer;\r\n    }\r\n\r\n    this.canvas.style.cursor = pointer;\r\n\r\n    this.postRenderEvent.emit({\r\n      eventType: \"PostRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public skipAnimations(): boolean {\r\n    const now = Date.now();\r\n    let result = false;\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.skipAnimation(now)) {\r\n        result = true;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","\r\nimport { IPadding, SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport interface ITextbox extends ISprite {\r\n  text: string;\r\n  textSpeed: number;\r\n  textIndex: number;\r\n  padding: IPadding;\r\n  fontSize: number;\r\n  font: string;\r\n  fontColor: string;\r\n  lineHeight: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  setText(text: string): this;\r\n  appendText(text: string): this;\r\n}\r\n\r\nexport interface ITextboxProps extends ISpriteProps {\r\n  text?: string;\r\n  textSpeed?: number;\r\n  textIndex?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n  padding?: IPadding;\r\n  fontSize?: number;\r\n  font?: string;\r\n  fontColor?: string;\r\n  lineHeight?: number;\r\n}\r\n\r\nexport class Textbox extends Sprite implements ITextbox {\r\n  private static regex: RegExp = /\\r\\n|\\r|\\n|[^\\t ]*[\\t ]?/g;\r\n  public readonly type: SpriteType = SpriteType.Textbox;\r\n\r\n  public text: string = \"\";\r\n  public textSpeed: number = 1;\r\n  public textIndex: number = 0;\r\n  public padding: IPadding = {\r\n    bottom: 5,\r\n    left: 5,\r\n    right: 5,\r\n    top: 5,\r\n  };\r\n  public fontSize: number = 12;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public lineHeight: number = 16;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n  private interpolatedText: string[] = [\"\"];\r\n\r\n  constructor(props: ITextboxProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.textSpeed = props.textSpeed || this.textSpeed;\r\n    if (props.hasOwnProperty(\"textIndex\")) {\r\n      this.textIndex = props.textIndex;\r\n    }\r\n    this.padding = props.padding || this.padding;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.lineHeight = props.lineHeight || this.lineHeight;\r\n\r\n    this.setTexture(\"Texture\");\r\n  }\r\n\r\n  public update() {\r\n    const maxWidth = this.textures[this.texture].width - this.padding.left - this.padding.right;\r\n    this.textIndex = Math.min(this.text.length, this.textIndex + this.textSpeed);\r\n    const words = this.text.match(Textbox.regex);\r\n    this.interpolatedText = [\"\"];\r\n    const maxLines = (this.textures[this.texture].height - this.padding.top - this.padding.bottom) / this.lineHeight;\r\n    let line: string = \"\";\r\n    let lineIndex: number = 0;\r\n    let measurement: TextMetrics;\r\n    let leftOver: number = this.textIndex;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n\r\n    for (const word of words) {\r\n\r\n      // If the next character is a newline, push a new line\r\n      if (word === \"\\n\" || word === \"\\r\\n\" || word === \"\\r\") {\r\n        this.interpolatedText.push(\"\");\r\n        leftOver -= word.length;\r\n        lineIndex += 1;\r\n        continue;\r\n      }\r\n\r\n      line = this.interpolatedText[lineIndex];\r\n\r\n      // If there are no more characters to push, break\r\n      if (leftOver === 0) {\r\n        break;\r\n      }\r\n\r\n      // If the line count is greater than the maximum number of lines, break\r\n      if ((lineIndex + 1) > maxLines) {\r\n        break;\r\n      }\r\n\r\n      // Test the word length\r\n      line += word;\r\n      measurement = tempctx.measureText(line);\r\n\r\n      // If the line overflows\r\n      if (measurement.width > maxWidth) {\r\n        lineIndex = this.interpolatedText.push(\"\") - 1;\r\n      }\r\n\r\n      this.interpolatedText[lineIndex] += word;\r\n      // Add the text to the screen\r\n\r\n      leftOver -= word.length;\r\n\r\n      if (leftOver < 0) {\r\n        this.interpolatedText[lineIndex] = this.interpolatedText[lineIndex].slice(0, leftOver);\r\n        break;\r\n      }\r\n      // Check to see if the word overFlows the animation\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D) {\r\n    super.render(ctx);\r\n    const maxHeight = this.textures[this.texture].height - this.padding.top;\r\n    let currentHeight = this.padding.top;\r\n\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.bottom,\r\n      this.width - this.padding.right,\r\n      this.height - this.padding.top,\r\n    );\r\n    ctx.clip();\r\n    for (const line of this.interpolatedText) {\r\n      if (currentHeight + this.fontSize > maxHeight) {\r\n        break;\r\n      }\r\n\r\n      ctx.fillText(line, this.padding.left, currentHeight);\r\n      currentHeight += this.lineHeight;\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    if (text.startsWith(this.text)) {\r\n      this.text = text;\r\n      return this;\r\n    }\r\n\r\n    this.text = text;\r\n    this.interpolatedText = [\"\"];\r\n    this.textIndex = 0;\r\n    return this;\r\n  }\r\n\r\n  public appendText(text: string): this {\r\n    this.text += text;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = super.skipAnimation(now) && this.textIndex < this.text.length;\r\n    this.textIndex = this.text.length;\r\n    return result;\r\n  }\r\n}\r\n","import { SpriteType, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ITextInput extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  caretIndex: number;\r\n  caretX: number;\r\n  selection: [number, number];\r\n  textScroll: number;\r\n  padding: [number, number, number, number];\r\n  frameCount: number;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ITextInputProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class TextInput extends Sprite implements ITextInput {\r\n  public readonly type: SpriteType = SpriteType.TextInput;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public caretIndex: number = 0;\r\n  public caretX: number = 0;\r\n  public selection: [number, number] = [0, 0];\r\n  public textScroll: number = 0;\r\n  public padding: [number, number, number, number] = [2, 2, 2, 2];\r\n  public frameCount: number = 0;\r\n  private showCaret: boolean = true;\r\n\r\n  constructor(props: ITextInputProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.width = props.width || this.width;\r\n    this.height = props.height || this.height;\r\n  }\r\n\r\n  public update(): void {\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    const textWidth: number = tempctx.measureText(this.text).width;\r\n    this.caretX = tempctx.measureText(this.text.slice(0, this.caretIndex)).width;\r\n    const relativeCaretX: number = this.caretX + this.textScroll;\r\n    const maxTextWidth: number  = this.width - this.padding[0] - this.padding[1];\r\n\r\n    if (relativeCaretX < 0) {\r\n      console.log(\"hit less than 0\");\r\n      this.textScroll += relativeCaretX;\r\n    } else if (relativeCaretX > maxTextWidth) {\r\n      console.log(\"hit greater than\");\r\n      this.textScroll -= relativeCaretX - maxTextWidth;\r\n    }\r\n\r\n    this.frameCount += 1;\r\n    if (this.frameCount >= 30) {\r\n      this.frameCount = 0;\r\n      this.showCaret = !this.showCaret;\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(0, 0, this.width, this.height);\r\n\r\n    // clip\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding[0],\r\n      this.padding[2],\r\n      this.width - this.padding[1] - this.padding[0],\r\n      this.width - this.padding[3],\r\n    );\r\n    ctx.clip();\r\n\r\n    // draw text\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textBaseline = TextBaseline.top;\r\n    ctx.fillText(this.text, this.textScroll + this.padding[0], 0);\r\n\r\n    if (this.showCaret) {\r\n      const caretX = this.textScroll + this.padding[0] + this.caretIndex;\r\n      ctx.beginPath();\r\n      ctx.moveTo(caretX, this.padding[2]);\r\n      ctx.lineTo(caretX, this.height - this.padding[3]);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n"],"names":["PI","Math","TAU","inFunc","ratio","outFunc","inverse","easeLinear","easeInQuad","easeOutQuad","easeInOutQuad","inOut","easeInCub","easeOutCub","easeInOutCub","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutSin","sin","easeInSin","easeInOutSin","easeOutElastic","pow","p","easeInElastic","easeInOutElastic","input","this","value","CanvasMatrix2DTransformAPI","x","y","radians","cos","a","b","c","d","tan","e","f","det","props","pa","pb","pc","pd","pe","pf","ma","mb","mc","md","me","mf","target","Identity","transform2D","slice","point","matrix","tx","ty","radFactor","degFactor","PI_2","factor","SpriteSheetKind","degrees","normalize","definition","result","Array","isArray","kind","JSON","frames","Error","JSON_TP_Array","meta","JSON_TP_Hash","definitionPromise","imgPromise","textures","_q","img","jsonKind","jsonKind_1","tslib_1.__values","_e","_f","frame","name","createImageBitmap","width","height","spritesheetArrayKind","_g","_j","_k","arrayFrame","filename","w","h","spritesheetHashKind","_l","Object","keys","spriteFrame","_o","_p","TextAlign","TextBaseline","PlayState","Cursor","SpriteType","url","opts","fetch","_a","json","createSpriteSheet","blob","left","right","z","EventEmitter","callbacks","callback","push","dispose","_this","includes","splice","indexOf","Promise","resolve","reject","disposer","listen","event","events","_b","Sprite","eases.easeLinear","auto","id","position","set","previousPosition","interpolatedPosition","hasOwnProperty","previousAlpha","alpha","interpolatedAlpha","source","loadTexture","now","interpolate","transformPoint","broadPhase","narrowPhase","sx","s","sy","move","transformCopy2D","translate","rotate","r","scale","cx","cy","timespan","wait","ease","animationLength","animationStart","Date","lastInterpolated","progress","j","setTo","parent","transform","texture","ctx","drawImage","defintion","createTextureMap","_c","loadedEvent","emit","_d","container","_super","Button","center","middle","selected","font","fontColor","fontSize","text","textAlign","textBaseline","tslib_1.__extends","setTexture","active","hover","cursor","pointer","update","render","fillStyle","fillText","Character","displayName","color","Checkbox","checked","Boolean","previousValue","checkedChangeEvent","eventType","property","stage","clicked","toggle","pointCollision","Close","audioContext","AudioContext","Container","sprite","sprites","playables","points","captured","down","firstDown","type","listener","mouseDown","document","body","mouseUp","mouseMove","touchStart","touchEnd","touchMove","touchCancel","keyDown","keyUp","canvas","createElement","appendChild","getContext","hookEvents","addPoint","mousePoint","InteractionManager","forEach","addEventListener","keyboardEvents","removeEventListener","mouseDownEvent","rawEvent","clientX","clientY","pointDown","pointUp","pointMove","touch","i","changedTouches","length","touchStartEvent","addTouchPoint","touchEndEvent","touchPointIndex","identifier","removeTouchPoint","touchCancelEvent","pointCancel","touchMoveEvent","alreadyDown","previousX","previousY","setFocus","pointDownEvent","pointUpEvent","pointClickEvent","hoveringSprite","rect","getBoundingClientRect","top","sort","zSort","isHovering","pointMoveEvent","createInteractionPoint","toString","removePoint","keyUpEvent","key","keyIndex","keyDownEvent","focused","Panel","focus","tempctx","Label","start","hanging","measureText","sortZ","collision","beginPath","clip","save","globalAlpha","restore","skipAnimation","Stopped","context","spritemap","end","gain","createGain","loaded","createSource","destination","SFXSprite","then","createPlayInstance","volume","res","arrayBuffer","buffer","decodeAudioData","node","createBufferSource","loop","connect","disconnect","Slider","Pill_Hover","max","min","sliderPattern","createPattern","Line","valueX","sliderDistance","clampedTX","valueChangeEvent","pillTexture","Pill_Active","Pill","Line_Cap_Left","Line_Cap_Right","fillRect","Stage","preInterpolateEvent","postInterpolateEvent","preHoverCheckEvent","hoverCheck","postHoverCheckEvent","preUpdateEvent","postUpdateEvent","preRenderEvent","clearRect","setTransform","style","postRenderEvent","Textbox","bottom","textSpeed","textIndex","padding","lineHeight","maxWidth","words","match","regex","interpolatedText","maxLines","line","lineIndex","leftOver","words_1","word","maxHeight","currentHeight","startsWith","TextInput","caretX","caretIndex","relativeCaretX","textScroll","maxTextWidth","console","log","frameCount","showCaret","lineWidth","strokeRect","moveTo","lineTo","stroke"],"mappings":"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"}