{"version":3,"file":"senpai-stage.js","sources":["../src/ease/consts.ts","../src/ease/index.ts","../src/matrix/index.ts","../src/spritesheet/index.ts","../src/util/index.ts","../src/events/SenpaiEvent.ts","../src/view/Sprite.ts","../src/view/Button.ts","../src/view/Character.ts","../src/view/Checkbox.ts","../src/view/Close.ts","../src/view/Container.ts","../src/view/InteractionManager.ts","../src/view/Label.ts","../src/view/Panel.ts","../src/view/SFXSprite.ts","../src/view/Slider.ts","../src/view/Stage.ts","../src/view/Textbox.ts","../src/view/TextInput.ts"],"sourcesContent":["export const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\n","/****\r\n * Custom ease functions, designed with functional programming concepts.\r\n */\r\nimport { PI, TAU } from \"./consts\";\r\n\r\nexport type EaseFunc = (ratio: number) => number;\r\n\r\nfunction inverse(inFunc: EaseFunc): EaseFunc {\r\n  return function outFunc(ratio: number): number {\r\n    return 1 - inFunc(1 - ratio);\r\n  };\r\n}\r\n\r\nfunction inOut(inFunc: EaseFunc): EaseFunc {\r\n  const outFunc = inverse(inFunc);\r\n  return (ratio: number): number => ratio < 0.5\r\n    ? 0.5 * inFunc(ratio * 2)\r\n    : 0.5 + 0.5 * outFunc(2 * ratio - 1);\r\n}\r\n\r\nexport const easeLinear: EaseFunc = function linear(ratio: number): number {\r\n  return ratio;\r\n};\r\n\r\nexport const easeInQuad: EaseFunc = (ratio: number): number => ratio * ratio;\r\nexport const easeOutQuad: EaseFunc = inverse(easeInQuad);\r\nexport const easeInOutQuad: EaseFunc = inOut(easeInQuad);\r\n\r\nexport const easeInCub: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio;\r\nexport const easeOutCub: EaseFunc = inverse(easeInCub);\r\nexport const easeInOutCub: EaseFunc = inOut(easeInCub);\r\n\r\nexport const easeInQuart: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio;\r\nexport const easeOutQuart: EaseFunc = inverse(easeInQuart);\r\nexport const easeInOutQuart: EaseFunc = inOut(easeInQuart);\r\n\r\nexport const easeInQuint: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio * ratio;\r\nexport const easeOutQuint: EaseFunc = inverse(easeInQuint);\r\nexport const easeInOutQuint: EaseFunc = inOut(easeInQuint);\r\n\r\nexport const easeOutSin: EaseFunc =\r\n  (ratio: number): number => Math.sin(ratio * PI * 0.5);\r\nexport const easeInSin: EaseFunc = inverse(easeOutSin);\r\nexport const easeInOutSin: EaseFunc = inOut(easeInSin);\r\n\r\nconst p = 0.3;\r\nexport const easeOutElastic: EaseFunc =\r\n  (ratio: number): number => Math.pow(2, -10 * ratio) * Math.sin((ratio - p / 4) * TAU / p) + 1;\r\nexport const easeInElastic: EaseFunc = inverse(easeOutElastic);\r\nexport const easeInOutElastic: EaseFunc = inOut(easeInElastic);\r\n","import { IInteractionPoint } from \"../util\";\r\n\r\nexport interface IMatrix {\r\n  value: number[] | Float64Array;\r\n  immutable: boolean;\r\n  translate(x: number, y: number): IMatrix;\r\n  scale(x: number, y: number): IMatrix;\r\n  rotate(angle: number): IMatrix;\r\n  skewX(angle: number): IMatrix;\r\n  skewY(angle: number): IMatrix;\r\n  transform(props: Float64Array | number[]): IMatrix;\r\n  inverse(): IMatrix;\r\n  reset(): IMatrix;\r\n  set(target: Float64Array | number[]): IMatrix;\r\n}\r\n\r\nexport class Matrix implements IMatrix {\r\n  public value: number[] | Float64Array = new Float64Array(Identity);\r\n  public immutable: boolean = false;\r\n\r\n  constructor(value?: number[] | Float64Array, immutable?: boolean) {\r\n    this.value = value || new Float64Array(Identity);\r\n    this.immutable = immutable || this.immutable;\r\n  }\r\n\r\n  public translate(x: number, y: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      translate(x, y, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    translate(x, y, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public scale(x: number, y: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      scale(x, y, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    scale(x, y, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public rotate(angle: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      rotate(angle, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    rotate(angle, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public skewX(angle: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      skewX(angle, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    skewX(angle, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public skewY(angle: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      skewY(angle, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    skewY(angle, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public transform(props: Float64Array | number[]): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      transform(this.value, props, m.value);\r\n      return m;\r\n    }\r\n    transform(this.value, props, this.value);\r\n    return this;\r\n  }\r\n\r\n  public reset(): IMatrix {\r\n    if (this.immutable) {\r\n      return chain();\r\n    }\r\n    reset(this.value);\r\n    return this;\r\n  }\r\n\r\n  public set(target: Float64Array | number[]): IMatrix {\r\n    set(target, this.value);\r\n    return this;\r\n  }\r\n\r\n  public inverse(): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      inverse(this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    inverse(this.value, this.value);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport function inverse(\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const a: number = matrix[0];\r\n  const b: number = matrix[1];\r\n  const c: number = matrix[2];\r\n  const d: number = matrix[3];\r\n  const e: number = matrix[4];\r\n  const f: number = matrix[5];\r\n  const det: number = 1 / (a * d - c * b);\r\n\r\n  setMatrix[0] = d * det;\r\n  setMatrix[1] = -b * det;\r\n  setMatrix[2] = -c * det;\r\n  setMatrix[3] = a * det;\r\n  setMatrix[4] = (c * f - e * d) * det;\r\n  setMatrix[5] = (e * b - a * f) * det;\r\n}\r\n\r\nexport const Identity = new Float64Array([1, 0, 0, 1, 0, 0]);\r\nexport const IdentityMatrix = new Matrix(Identity, true);\r\n\r\nexport function translate(\r\n  x: number,\r\n  y: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  setMatrix[0] = matrix[0];\r\n  setMatrix[1] = matrix[1];\r\n  setMatrix[2] = matrix[2];\r\n  setMatrix[3] = matrix[3];\r\n  setMatrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\r\n  setMatrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\r\n}\r\n\r\nexport function scale(\r\n  x: number,\r\n  y: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  setMatrix[0] = matrix[0] * x;\r\n  setMatrix[1] = matrix[1] * x;\r\n  setMatrix[2] = matrix[2] * y;\r\n  setMatrix[3] = matrix[3] * y;\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function rotate(\r\n  angle: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  const a = matrix[0];\r\n  const b = matrix[1];\r\n  const c = matrix[2];\r\n  const d = matrix[3];\r\n\r\n  setMatrix[0] = a * cos + c * sin;\r\n  setMatrix[1] = b * cos + d * sin;\r\n  setMatrix[2] = c * cos - a * sin;\r\n  setMatrix[3] = d * cos - b * sin;\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function skewX(\r\n  angle: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const tan = Math.tan(angle);\r\n\r\n  setMatrix[0] = matrix[0];\r\n  setMatrix[1] = matrix[1];\r\n  setMatrix[2] = matrix[2] + matrix[0] * tan;\r\n  setMatrix[3] = matrix[3] + matrix[1] * tan;\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function skewY(\r\n  angle: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const tan = Math.tan(angle);\r\n\r\n  setMatrix[0] = matrix[0] + matrix[2] * tan;\r\n  setMatrix[1] = matrix[1] + matrix[3] * tan;\r\n  setMatrix[2] = matrix[2];\r\n  setMatrix[3] = matrix[3];\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function transform(\r\n  matrix: Float64Array | number[],\r\n  props: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  // props values\r\n  const pa = props[0];\r\n  const pb = props[1];\r\n  const pc = props[2];\r\n  const pd = props[3];\r\n  const pe = props[4];\r\n  const pf = props[5];\r\n\r\n  // matrix values\r\n  const ma = matrix[0];\r\n  const mb = matrix[1];\r\n  const mc = matrix[2];\r\n  const md = matrix[3];\r\n  const me = matrix[4];\r\n  const mf = matrix[5];\r\n\r\n  setMatrix[0] = ma * pa + mc * pb;\r\n  setMatrix[1] = mb * pa + md * pb;\r\n  setMatrix[2] = ma * pc + mc * pd;\r\n  setMatrix[3] = mb * pc + md * pd;\r\n  setMatrix[4] = ma * pe + mc * pf + me;\r\n  setMatrix[5] = mb * pe + md * pf + mf;\r\n}\r\n\r\nexport function transformPoints(\r\n  points: IInteractionPoint[],\r\n  matrix: Float64Array | number[],\r\n): void {\r\n  for (const point of points) {\r\n    transformPoint(point, matrix);\r\n  }\r\n}\r\n\r\nexport function transformPoint(point: IInteractionPoint, matrix: Float64Array | number[]): void {\r\n  point.tx = matrix[0] * point.x + matrix[2] * point.y + matrix[4];\r\n  point.ty = matrix[1] * point.x + matrix[3] * point.y + matrix[5];\r\n}\r\n\r\nexport function set(target: Float64Array | number[], source: Float64Array | number[]): void {\r\n  for (let i = 0; i < target.length && i < source.length; i++) {\r\n    target[i] = source[i];\r\n  }\r\n}\r\n\r\nexport function reset(target: Float64Array | number[]): void {\r\n  return set(target, [1, 0, 0, 1, 0, 0]);\r\n}\r\n\r\nexport function chain(\r\n  value: Float64Array | number[] = Identity,\r\n  immutable: boolean = false,\r\n): IMatrix {\r\n  return new Matrix(value, immutable);\r\n}\r\n","export interface ISpriteSheet {\r\n  kind: SpriteSheetKind;\r\n}\r\n\r\nexport enum SpriteSheetKind {\r\n  JSON,\r\n  JSON_TP_Hash,\r\n  JSON_TP_Array,\r\n}\r\n\r\nexport interface ISpriteSheetPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetName {\r\n  name: string;\r\n}\r\n\r\nexport interface ISpriteSheetSize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface ISpriteSheetSizeShort {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetRotated {\r\n  rotated: boolean;\r\n}\r\n\r\nexport interface ISpriteSheetTrimmed {\r\n  trimmed: boolean;\r\n}\r\n\r\nexport interface ISpriteSheetSourceSize {\r\n  spriteSourceSize: ISpriteSheetPosition & ISpriteSheetSizeShort;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSizeShort;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetJSONHash extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Hash;\r\n  frames: {\r\n    [frame: string]: ISpriteSheetPosition\r\n      & ISpriteSheetSizeShort\r\n      & ISpriteSheetRotated\r\n      & ISpriteSheetTrimmed\r\n      & ISpriteSheetSourceSize;\r\n  };\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport interface ISpriteSheetFileName {\r\n  filename: string;\r\n}\r\n\r\nexport interface ISpriteSheetJSONArray extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Array;\r\n  frames: Array<ISpriteSheetPosition\r\n      & ISpriteSheetSizeShort\r\n      & ISpriteSheetRotated\r\n      & ISpriteSheetTrimmed\r\n      & ISpriteSheetSourceSize\r\n      & ISpriteSheetFileName>;\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport interface ISpriteSheetFrame {\r\n  frame: ISpriteSheetPosition & ISpriteSheetSizeShort;\r\n}\r\n\r\nexport interface ISpriteSheetJSON extends ISpriteSheet, Iterable<ISpriteSheetName\r\n& ISpriteSheetPosition\r\n& ISpriteSheetSize> {\r\n  kind: SpriteSheetKind.JSON;\r\n  [key: number]: ISpriteSheetName\r\n    & ISpriteSheetPosition\r\n    & ISpriteSheetSize;\r\n  length: number;\r\n\r\n}\r\n\r\nexport interface IJSONSpriteSheet extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Array;\r\n  frames: Array<\r\n    ISpriteSheetFileName\r\n    & ISpriteSheetFrame\r\n    & ISpriteSheetRotated\r\n    & ISpriteSheetTrimmed\r\n    & ISpriteSheetSourceSize\r\n    & {\r\n      sourceSize: ISpriteSheetSizeShort;\r\n    }\r\n  >;\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport async function loadSpriteSheet(url: string | Request, opts?: RequestInit): Promise<ISpriteSheet> {\r\n  const resp = await fetch(url, opts);\r\n  const definition = await resp.json();\r\n\r\n  if (Array.isArray(definition)) {\r\n    const result: ISpriteSheetJSON = {\r\n      kind: SpriteSheetKind.JSON,\r\n      length: definition.length,\r\n      [Symbol.iterator]: Array.prototype[Symbol.iterator],\r\n    };\r\n    for (let i = 0; i < definition.length; i++) {\r\n      result[i] = definition[i];\r\n    }\r\n    return result;\r\n  }\r\n  if (!definition.frames) {\r\n    throw new Error(\"Invalid spritesheet format.\");\r\n  }\r\n  if (Array.isArray(definition.frames)) {\r\n    const result: ISpriteSheetJSONArray = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Array,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  } else {\r\n    const result: ISpriteSheetJSONHash = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Hash,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ITextureMap {\r\n  [texture: string]: ImageBitmap;\r\n}\r\n\r\nexport async function createTextureMap(definitionPromise: Promise<ISpriteSheet>, imgPromise: Promise<ImageBitmap>) {\r\n  const textures: ITextureMap = {};\r\n  const definition = await definitionPromise;\r\n  const img = await imgPromise;\r\n  switch (definition.kind) {\r\n    case SpriteSheetKind.JSON:\r\n      const jsonKind: ISpriteSheetJSON = definition as ISpriteSheetJSON;\r\n      for (const frame of jsonKind) {\r\n        textures[frame.name] = await createImageBitmap(\r\n          img,\r\n          frame.x,\r\n          frame.y,\r\n          frame.width,\r\n          frame.height,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Array:\r\n      const spritesheetArrayKind: ISpriteSheetJSONArray = definition as ISpriteSheetJSONArray;\r\n      for (const arrayFrame of spritesheetArrayKind.frames) {\r\n        textures[arrayFrame.filename] = await createImageBitmap(\r\n          img,\r\n          arrayFrame.x,\r\n          arrayFrame.y,\r\n          arrayFrame.w,\r\n          arrayFrame.h,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Hash:\r\n      const spritesheetHashKind: ISpriteSheetJSONHash = definition as ISpriteSheetJSONHash;\r\n      for (const frame of Object.keys(spritesheetHashKind.frames)) {\r\n        const spriteFrame = spritesheetHashKind.frames[frame];\r\n        textures[frame] = await createImageBitmap(\r\n          img,\r\n          spriteFrame.x,\r\n          spriteFrame.y,\r\n          spriteFrame.w,\r\n          spriteFrame.h,\r\n        );\r\n      }\r\n      break;\r\n  }\r\n  return textures;\r\n}\r\n\r\nexport async function loadImage(url: string | Request, opts?: RequestInit): Promise<ImageBitmap> {\r\n  const res = await fetch(url, opts);\r\n  const blob = await res.blob();\r\n  return createImageBitmap(blob);\r\n}\r\n","import { ISprite } from \"../view/Sprite\";\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrameMap {\r\n  [frame: string]: ISpriteSheetFrame;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSize;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrame {\r\n  frame: ISpriteSheetPoint & ISpriteSheetSize;\r\n  rotated: boolean;\r\n  trimmed: boolean;\r\n  spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSize;\r\n  sourceSize: ISpriteSheetSize;\r\n}\r\n\r\nexport interface ISpriteSheetSize {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IInteractionPoint extends IPoint {\r\n  id: string;\r\n  type: \"Touch\" | \"Mouse\";\r\n  down: boolean;\r\n  clicked: boolean;\r\n  captured: boolean;\r\n  active: ISprite;\r\n  hover: ISprite;\r\n  firstDown: boolean;\r\n  tx: number;\r\n  ty: number;\r\n}\r\n\r\nexport interface IPlayable {\r\n  started: number; // timestamp when the media last began playing\r\n  length: number; // media play length timespan\r\n  start: number; // media start time\r\n  end: number; // media end time\r\n  loop: boolean; // does this media loop?\r\n  state: PlayState; // self explainatory\r\n  loaded: Promise<void>; // this should be a promise that resolves once the audio has loaded\r\n  play(): this;\r\n  pause(): this;\r\n  stop(): this;\r\n  setVolume(volume: number); // accepts number [0. 1]\r\n}\r\n\r\nexport interface IAudio extends IPlayable {\r\n  gain: GainNode; // controls volume\r\n  source: AudioBuffer; // is null until the audioBuffer is loaded\r\n  destination: AudioNode;\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n}\r\n\r\nexport interface ISoundSpriteSheet {\r\n  resources: string[];\r\n  spritemap: {\r\n    [name: string]: ISoundSpriteSheetTexture;\r\n  };\r\n}\r\n\r\nexport interface ISoundSpriteSheetTexture {\r\n  start: number;\r\n  end: number;\r\n  loop: boolean;\r\n}\r\n\r\nexport interface IAudioProps extends IPlayableProps {\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n  name: string; // determines the name of the audio clip\r\n}\r\n\r\nexport interface IPlayableProps {\r\n  source: Promise<Response>;\r\n  texture: string; // this should be name of the texture in the spritesheet\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IPadding {\r\n  left: number;\r\n  right: number;\r\n  top: number;\r\n  bottom: number;\r\n}\r\n\r\n/**\r\n * Sort by z level in ascending order.\r\n */\r\nexport function zSort(left: ISprite, right: ISprite): number {\r\n  return left.z - right.z;\r\n}\r\n\r\nexport enum TextAlign {\r\n  \"left\" = \"left\",\r\n  \"right\" = \"right\",\r\n  \"center\" = \"center\",\r\n  \"start\" = \"start\",\r\n  \"end\" = \"end\",\r\n}\r\n\r\nexport enum TextBaseline {\r\n  \"top\" = \"top\",\r\n  \"hanging\" = \"hanging\",\r\n  \"middle\" = \"middle\",\r\n  \"alphabetic\" = \"alphabetic\",\r\n  \"ideographic\" = \"ideographic\",\r\n  \"bottom\" = \"bottom\",\r\n}\r\n\r\nexport enum PlayState {\r\n  Playing,\r\n    Paused,\r\n    Stopped,\r\n}\r\n\r\nexport enum Cursor {\r\n  \"auto\" = \"auto\",\r\n \"default\" = \"default\",\r\n  \"none\" = \"none\",\r\n  \"context-menu\" = \"context-menu\",\r\n  \"help\" = \"help\",\r\n  \"pointer\" = \"pointer\",\r\n  \"progress\" = \"progress\",\r\n  \"wait\" = \"wait\",\r\n  \"cell\" = \"cell\",\r\n  \"crosshair\" = \"crosshair\",\r\n  \"text\" = \"text\",\r\n  \"vertical-text\" = \"vertical-text\",\r\n  \"alias\" = \"alias\",\r\n  \"copy\" = \"copy\",\r\n  \"move\" = \"move\",\r\n  \"no-drop\" = \"no-drop\",\r\n  \"not-allowed\" = \"not-allowed\",\r\n  \"e-resize\" = \"e-resize\",\r\n  \"n-resize\" = \"n-resize\",\r\n  \"ne-resize\" = \"ne-resize\",\r\n  \"nw-resize\" = \"nw-resize\",\r\n  \"s-resize\" = \"s-resize\",\r\n  \"se-resize\" = \"se-resize\",\r\n  \"sw-resize\" = \"sw-resize\",\r\n  \"w-resize\" = \"w-resize\",\r\n  \"ew-resize\" = \"ew-resize\",\r\n  \"ns-resize\" = \"ns-resize\",\r\n  \"nesw-resize\" = \"nesw-resize\",\r\n  \"nwse-resize\" = \"nwse-resize\",\r\n  \"col-resize\" = \"col-resize\",\r\n  \"row-resize\" = \"row-resize\",\r\n  \"all-scroll\" = \"all-scroll\",\r\n  \"zoom-in\" = \"zoom-in\",\r\n  \"zoom-out\" = \"zoom-out\",\r\n  \"grab\" = \"grab\",\r\n  \"grabbing\" = \"grabbing\",\r\n}\r\n\r\nexport interface ISpritePosition {\r\n  x?: number;\r\n  y?: number;\r\n  s: number;\r\n  sx?: number;\r\n  sy?: number;\r\n  r?: number;\r\n  cx?: number;\r\n  cy?: number;\r\n}\r\n","import { IContainer } from \"../view/Container\";\r\nimport { IInteractionManager } from \"../view/InteractionManager\";\r\nimport { ISprite } from \"../view/Sprite\";\r\n\r\nexport type EventCallback<T> = (events: T) => void;\r\n\r\nexport interface ISenpaiEvent {\r\n  eventType: string;\r\n  stage: IContainer;\r\n  source: ISprite | IInteractionManager;\r\n}\r\n\r\nexport interface IValueChangeEvent<T> extends ISenpaiEvent {\r\n  eventType: \"ValueChange\";\r\n  property: string;\r\n  value: T;\r\n  previousValue: T;\r\n}\r\n\r\nexport interface IDisposer {\r\n  dispose: () => void;\r\n}\r\n\r\nexport class EventEmitter<T extends ISenpaiEvent> {\r\n  public callbacks: Array<EventCallback<T>> = [];\r\n  public clear() {\r\n    this.callbacks = [];\r\n  }\r\n  public listen(callback: EventCallback<T>): IDisposer {\r\n    this.callbacks.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        if (this.callbacks.includes(callback)) {\r\n          this.callbacks.splice(\r\n            this.callbacks.indexOf(callback),\r\n            1,\r\n          );\r\n        }\r\n      },\r\n    };\r\n  }\r\n  public promise(): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      const disposer = this.listen((event) => {\r\n        disposer.dispose();\r\n        resolve(event);\r\n      });\r\n    });\r\n  }\r\n  public once(callback: EventCallback<T>): IDisposer {\r\n    const disposer = this.listen((events: T) => {\r\n      callback(events);\r\n      disposer.dispose();\r\n    });\r\n    return disposer;\r\n  }\r\n\r\n  public emit(events: T): void {\r\n    for (const callback of this.callbacks.slice()) {\r\n      callback(events);\r\n    }\r\n  }\r\n}\r\n","import * as eases from \"../ease\";\r\nimport {\r\n  EventEmitter,\r\n  IKeyDownEvent,\r\n  IKeyUpEvent,\r\n  IPointClickEvent,\r\n  IPointDownEvent,\r\n  IPointEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  IValueChangeEvent,\r\n} from \"../events\";\r\nimport { ISpriteLoadedEvent } from \"../events/SpriteEvents\";\r\nimport * as m from \"../matrix\";\r\nimport { createTextureMap, ISpriteSheet, ITextureMap, loadImage, loadSpriteSheet } from \"../spritesheet\";\r\nimport { Cursor, IInteractionPoint, ISize, ISpritePosition } from \"../util\";\r\nimport { IContainer } from \"./Container\";\r\n// import { IStage } from \"./Stage\";\r\n\r\nexport interface ISprite extends ISize {\r\n  id: string;\r\n  parent: ISprite;\r\n  container: IContainer;\r\n  // position\r\n\r\n  previousPosition: Float64Array;\r\n  position: Float64Array;\r\n  inverse: Float64Array;\r\n  alpha: number;\r\n  interpolatedAlpha: number;\r\n  previousAlpha: number;\r\n  z: number;\r\n\r\n  // animation\r\n  textures: ITextureMap;\r\n  lastInterpolated: number;\r\n  interpolatedPosition: Float64Array;\r\n  animationStart: number;\r\n  animationLength: number;\r\n  wait: number;\r\n  // stage properties\r\n\r\n  active: boolean;\r\n  hover: boolean;\r\n  down: boolean;\r\n  focused: boolean;\r\n  tabIndex: number;\r\n\r\n  cursor: Cursor;\r\n  loaded: Promise<void>;\r\n\r\n  texture: string;\r\n\r\n  // events\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointDownEvent: EventEmitter<IPointEvent>;\r\n  pointClickEvent: EventEmitter<IPointClickEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n  loadedEvent: EventEmitter<ISpriteLoadedEvent>;\r\n\r\n  textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;\r\n\r\n  // this is set by the over function\r\n  ease(ratio: number): number;\r\n\r\n  broadPhase(point: IInteractionPoint): boolean;\r\n  narrowPhase(point: IInteractionPoint): ISprite;\r\n  isHovering(point: IInteractionPoint, now: number): ISprite;\r\n  pointCollision(point: IInteractionPoint): boolean;\r\n  setTexture(texture: string): this;\r\n  over(timespan: number, wait: number, ease: (ratio: number) => number): this;\r\n  movePosition(position: ISpritePosition): this;\r\n  move(position: number[] | Float64Array): this;\r\n  setZ(z: number): this;\r\n  setAlpha(alpha: number): this;\r\n  interpolate(now: number): void;\r\n  skipAnimation(now: number): boolean;\r\n  update(): void;\r\n  render(ctx: CanvasRenderingContext2D): void;\r\n  focus(sprite: ISprite): void;\r\n}\r\n\r\nexport interface ISpriteProps {\r\n  id: string;\r\n  position: Float64Array | number[];\r\n  textures?: ITextureMap;\r\n  alpha?: number;\r\n  z?: number;\r\n  source: Promise<ImageBitmap>;\r\n  definition: Promise<ISpriteSheet>;\r\n}\r\n\r\nexport class Sprite implements ISprite {\r\n  public id: string = \"\";\r\n  public position: Float64Array = new Float64Array(6);\r\n  public previousPosition: Float64Array = new Float64Array(6);\r\n  public interpolatedPosition: Float64Array = new Float64Array(6);\r\n  public inverse: Float64Array = new Float64Array(6);\r\n  public alpha: number = 1;\r\n  public interpolatedAlpha: number = 1;\r\n  public previousAlpha: number = 1;\r\n  public z: number = 0;\r\n  public parent: ISprite = null;\r\n  public container: IContainer = null;\r\n  public wait: number = 0;\r\n\r\n  public lastInterpolated: number = 0;\r\n  public animationStart: number = 0;\r\n  public ease = eases.easeLinear;\r\n  public cursor: Cursor = Cursor.auto;\r\n  public animationLength: number = 0;\r\n  public active: boolean = false;\r\n  public hover: boolean = false;\r\n  public down: boolean = false;\r\n  public textures: ITextureMap = {};\r\n  public texture: string;\r\n  public loaded: Promise<void> = null;\r\n  public focused: boolean = false;\r\n  public tabIndex: number = 0;\r\n\r\n  public width: number = 0;\r\n  public height: number = 0;\r\n\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n  public pointClickEvent: EventEmitter<IPointClickEvent> = new EventEmitter<IPointClickEvent>();\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n  public loadedEvent: EventEmitter<ISpriteLoadedEvent> = new EventEmitter<ISpriteLoadedEvent>();\r\n\r\n  public textureChangeEvent: EventEmitter<IValueChangeEvent<string>> = new EventEmitter<IValueChangeEvent<string>>();\r\n\r\n  constructor(props: ISpriteProps) {\r\n    this.id = props.id;\r\n    const position = props.position || m.Identity;\r\n    this.textures = props.textures ? props.textures : this.textures;\r\n    m.set(this.position, position);\r\n    m.set(this.previousPosition, position);\r\n    m.set(this.interpolatedPosition, position);\r\n\r\n    if (props.hasOwnProperty(\"alpha\")) {\r\n      this.previousAlpha = this.alpha = this.interpolatedAlpha = props.alpha;\r\n    }\r\n    if (props.hasOwnProperty(\"z\")) {\r\n      this.z = props.z;\r\n    }\r\n    if (props.source && props.definition) {\r\n      this.loadTexture(\r\n        props.definition,\r\n        props.source,\r\n      );\r\n    }\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    return point.tx >= 0 && point.tx <= this.width && point.ty >= 0 && point.ty <= this.height;\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    return true;\r\n  }\r\n\r\n  public isHovering(point: IInteractionPoint, now: number): ISprite {\r\n    this.interpolate(now);\r\n    m.transformPoint(point, this.inverse);\r\n    if (this.broadPhase(point)) {\r\n      return this.narrowPhase(point);\r\n    }\r\n  }\r\n\r\n  public movePosition(position: ISpritePosition): this {\r\n    const sx = position.sx || position.sx === 0 ? position.sx : position.s;\r\n    const sy = position.sy || position.sy === 0 ? position.sy : position.s;\r\n\r\n    return this.move(\r\n      m.chain([1, 0, 0, 1, 0, 0], false)\r\n        .translate(position.x || 0, position.y || 0)\r\n        .rotate(position.r || 0)\r\n        .scale(sx === 0 ? 0 : sx || 1, sy === 0 ? 0 : sy || 1)\r\n        .translate(position.cx ? -position.cx : 0, position.cy ? -position.cy : 0)\r\n        .value,\r\n    );\r\n  }\r\n\r\n  public move(position: number[] | Float64Array): this {\r\n    this.previousPosition[0] = this.interpolatedPosition[0];\r\n    this.previousPosition[1] = this.interpolatedPosition[1];\r\n    this.previousPosition[2] = this.interpolatedPosition[2];\r\n    this.previousPosition[3] = this.interpolatedPosition[3];\r\n    this.previousPosition[4] = this.interpolatedPosition[4];\r\n    this.previousPosition[5] = this.interpolatedPosition[5];\r\n\r\n    this.position[0] = position[0];\r\n    this.position[1] = position[1];\r\n    this.position[2] = position[2];\r\n    this.position[3] = position[3];\r\n    this.position[4] = position[4];\r\n    this.position[5] = position[5];\r\n    return this;\r\n  }\r\n\r\n  public setAlpha(alpha: number): this {\r\n    this.previousAlpha = this.interpolatedAlpha;\r\n    this.alpha = alpha;\r\n    return this;\r\n  }\r\n\r\n  public setZ(z: number): this {\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  public over(timespan: number, wait: number = 0, ease: (ratio: number) => number = this.ease): this {\r\n    this.animationLength = timespan;\r\n    this.animationStart = Date.now();\r\n    this.ease = ease || this.ease;\r\n    this.wait = wait;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = now < this.animationLength + this.animationStart;\r\n    this.animationStart = now - this.animationLength;\r\n    return result;\r\n  }\r\n\r\n  public update(): void {\r\n    // No op\r\n  }\r\n  public interpolate(now: number): void {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    this.lastInterpolated = now;\r\n\r\n    const progress = now - (this.animationStart + this.wait);\r\n\r\n    const ratio = (progress >= this.animationLength)\r\n        ? 1\r\n        : (progress <= 0 ? 0 : this.ease(progress / this.animationLength));\r\n\r\n    if (ratio === 1) {\r\n      this.interpolatedPosition[0] = this.position[0];\r\n      this.interpolatedPosition[1] = this.position[1];\r\n      this.interpolatedPosition[2] = this.position[2];\r\n      this.interpolatedPosition[3] = this.position[3];\r\n      this.interpolatedPosition[4] = this.position[4];\r\n      this.interpolatedPosition[5] = this.position[5];\r\n      this.interpolatedAlpha = this.alpha;\r\n    } else if (ratio === 0) {\r\n      this.interpolatedPosition[0] = this.previousPosition[0];\r\n      this.interpolatedPosition[1] = this.previousPosition[1];\r\n      this.interpolatedPosition[2] = this.previousPosition[2];\r\n      this.interpolatedPosition[3] = this.previousPosition[3];\r\n      this.interpolatedPosition[4] = this.previousPosition[4];\r\n      this.interpolatedPosition[5] = this.previousPosition[5];\r\n      this.interpolatedAlpha = this.previousAlpha;\r\n    } else {\r\n      for (let j = 0; j < 6; j++) {\r\n        this.interpolatedPosition[j] = this.previousPosition[j]\r\n          + ratio * (this.position[j] - this.previousPosition[j]);\r\n      }\r\n      this.interpolatedAlpha = this.previousAlpha + ratio * (this.alpha - this.previousAlpha);\r\n    }\r\n\r\n    m.inverse(this.interpolatedPosition, this.inverse);\r\n\r\n    if (this.parent) {\r\n      this.parent.interpolate(now);\r\n\r\n      m.chain(this.parent.inverse, true)\r\n        .transform(this.inverse)\r\n        .set(this.inverse);\r\n    }\r\n  }\r\n  public setTexture(texture: string): this {\r\n    const oldTexture = this.texture;\r\n    this.texture = texture;\r\n    this.width = this.textures[this.texture].width;\r\n    this.height = this.textures[this.texture].height;\r\n\r\n    if (oldTexture !== this.texture) {\r\n      // this.emit(\"texture-change\", this.texture); // TODO\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures[this.texture], 0, 0);\r\n  }\r\n\r\n  public focus(target: ISprite) {\r\n    if (target === this) {\r\n      this.focused = true;\r\n    }\r\n  }\r\n\r\n  private async loadTexture(defintion: Promise<ISpriteSheet>, source: Promise<ImageBitmap>): Promise<void> {\r\n    this.textures = await createTextureMap(defintion, source);\r\n    this.loadedEvent.emit({\r\n      definition: await defintion,\r\n      eventType: \"SpriteLoaded\",\r\n      source: this,\r\n      spriteSource: await source,\r\n      stage: this.container,\r\n    });\r\n  }\r\n}\r\n","import { Cursor, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nimport assert from \"assert\";\r\n\r\nexport interface IButton extends ISprite {\r\n  selected: boolean;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  text: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface IButtonProps extends ISpriteProps {\r\n  selected?: boolean;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  text?: string;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Button extends Sprite implements IButton {\r\n  public selected: boolean = false;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public text: string =  \"\";\r\n  public textAlign: TextAlign = TextAlign.center;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n\r\n  constructor(props: IButtonProps) {\r\n    super(props);\r\n    this.selected = props.selected || false;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.text = props.text || this.text;\r\n    this.textAlign = props.textAlign;\r\n    this.textBaseline = props.textBaseline;\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const selected = this.selected ? \"Selected\" : \"Unselected\";\r\n    this.setTexture(`${active}_${hover}_${selected}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.textures[this.texture].width * 0.5, this.textures[this.texture].height * 0.5);\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    ctx.textAlign = TextAlign.center;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICharacterProps extends ISpriteProps {\r\n  name: string;\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport interface ICharacter extends ISprite {\r\n  name: string;\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport class Character extends Sprite implements ICharacter {\r\n  public name: string = \"\";\r\n  public displayName: string = \"\";\r\n  public color: string = \"\";\r\n  constructor(props: ICharacterProps) {\r\n    super(props);\r\n    this.name = props.name;\r\n    this.displayName = props.displayName;\r\n    this.color = props.color;\r\n  }\r\n}\r\n","\r\nimport { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport {\r\n\r\n  Cursor,\r\n  IInteractionPoint,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICheckbox extends ISprite {\r\n  checked: boolean;\r\n  text: string;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  toggleEvent: EventEmitter<IValueChangeEvent<boolean>>;\r\n\r\n  setText(text: string): this;\r\n  toggle(): this;\r\n}\r\n\r\nexport interface ICheckboxProps extends ISpriteProps {\r\n  checked?: boolean;\r\n  text?: string;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Checkbox extends Sprite implements ICheckbox {\r\n  public checked: boolean = false;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n  public toggleEvent: EventEmitter<IValueChangeEvent<boolean>> = new EventEmitter<IValueChangeEvent<boolean>>();\r\n\r\n  constructor(props: ICheckboxProps) {\r\n    super(props);\r\n    this.checked = Boolean(props.checked) || false;\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n  }\r\n\r\n  public toggle(): this {\r\n    this.checked = !this.checked;\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    if (point.clicked && point.active === this) {\r\n      this.toggle();\r\n      // this.emit(\"toggle\", point); // TODO\r\n    }\r\n    return super.pointCollision(point);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.width * 1.1, this.height / 2);\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const checked = this.checked ? \"Checked\" : \"Unchecked\";\r\n    this.setTexture(`${active}_${hover}_${checked}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { Cursor } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IClose extends ISprite {\r\n\r\n}\r\n\r\nexport interface ICloseProps extends ISpriteProps {\r\n\r\n}\r\n\r\nexport class Close extends Sprite implements IClose {\r\n  constructor(props: ICloseProps) {\r\n    super(props);\r\n  }\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    this.setTexture(`${active}_${hover}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n}\r\n","import { IInteractionPoint, IPlayable } from \"../util\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IContainer {\r\n  sprites: ISprite[];\r\n  playables: IPlayable[];\r\n  points: IInteractionPoint[];\r\n  audioContext: AudioContext;\r\n\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  addPlayable(sprite: IPlayable): this;\r\n  removePlayable(sprite: IPlayable): this;\r\n  addPoint(point: IInteractionPoint): this;\r\n  removePoint(point: IInteractionPoint): this;\r\n}\r\n\r\nexport interface IContainerProps {\r\n  audioContext: AudioContext;\r\n}\r\n\r\nexport class Container implements IContainer {\r\n\r\n  public sprites: ISprite[] = [];\r\n  public playables: IPlayable[] = [];\r\n  public points: IInteractionPoint[] = [];\r\n  public audioContext: AudioContext = null;\r\n\r\n  constructor(props: IContainerProps) {\r\n    this.audioContext = props.audioContext || new AudioContext();\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    if (!this.sprites.includes(sprite)) {\r\n      this.sprites.push(sprite);\r\n      sprite.container = this;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.container = null;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPlayable(sprite: IPlayable): this {\r\n    if (!this.playables.includes(sprite)) {\r\n      this.playables.push(sprite);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.connect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePlayable(sprite: IPlayable): this {\r\n    if (this.playables.includes(sprite)) {\r\n      this.playables.splice(this.playables.indexOf(sprite), 1);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.disconnect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPoint(point: IInteractionPoint): this {\r\n    if (!this.points.includes(point)) {\r\n      this.points.push(point);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePoint(point: IInteractionPoint): this {\r\n    if (this.points.includes(point)) {\r\n      this.points.splice(this.points.indexOf(point), 1);\r\n    }\r\n    return this;\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IMouseDownEvent,\r\n  IMouseMoveEvent,\r\n  IMouseUpEvent,\r\n  IPointDownEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  ITouchCancelEvent,\r\n  ITouchEndEvent,\r\n  ITouchMoveEvent,\r\n  ITouchStartEvent,\r\n  IKeyDownEvent,\r\n  IKeyUpEvent,\r\n} from \"../events\";\r\nimport { IInteractionPoint, zSort } from \"../util\";\r\nimport { Container, IContainer, IContainerProps } from \"./Container\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\ninterface IInteractionPointIndex {\r\n  [id: number]: IInteractionPoint;\r\n}\r\n\r\ninterface IKeyIndex {\r\n  [key: string]: boolean;\r\n}\r\n\r\nexport interface IInteractionManager extends IContainer {\r\n  canvas: HTMLCanvasElement;\r\n  mousePoint: IInteractionPoint;\r\n  touchPointIndex: IInteractionPointIndex;\r\n  keyIndex: IKeyIndex;\r\n\r\n  pointDownEvent: EventEmitter<IPointDownEvent>;\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n\r\n  mouseDownEvent: EventEmitter<IMouseDownEvent>;\r\n  mouseUpEvent: EventEmitter<IMouseUpEvent>;\r\n  mouseMoveEvent: EventEmitter<IMouseMoveEvent>;\r\n\r\n  touchCancelEvent: EventEmitter<ITouchCancelEvent>;\r\n  touchEndEvent: EventEmitter<ITouchEndEvent>;\r\n  touchMoveEvent: EventEmitter<ITouchMoveEvent>;\r\n  touchStartEvent: EventEmitter<ITouchStartEvent>;\r\n\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n\r\n  hookEvents(): void;\r\n  dispose(): void;\r\n  createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint;\r\n  addTouchPoint(touch: Touch): IInteractionPoint;\r\n  removeTouchPoint(touch: Touch): void;\r\n  pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n\r\n  // high level events\r\n  mouseDown(event: MouseEvent): void;\r\n  mouseUp(event: MouseEvent): void;\r\n  mouseMove(event: MouseEvent): void;\r\n  touchStart(event: TouchEvent): void;\r\n  touchEnd(event: TouchEvent): void;\r\n  touchMove(event: TouchEvent): void;\r\n  touchCancel(event: TouchEvent): void;\r\n\r\n  keyDown(event: KeyboardEvent): void;\r\n  keyUp(event: KeyboardEvent): void;\r\n\r\n  setFocus(target: ISprite): void;\r\n}\r\n\r\ninterface IInteractionPointEvent {\r\n  target: HTMLElement;\r\n  event: string;\r\n  listener: (e: MouseEvent | TouchEvent) => void;\r\n}\r\ninterface IKeyboardEvent {\r\n  target: HTMLElement;\r\n  event: string;\r\n  listener: (e: KeyboardEvent) => void;\r\n}\r\n\r\nexport interface IInteractionManagerProps extends IContainerProps {\r\n  canvas: HTMLCanvasElement;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class InteractionManager extends Container implements IInteractionManager {\r\n  public canvas: HTMLCanvasElement = null;\r\n  public ctx: CanvasRenderingContext2D = null;\r\n  public touchPointIndex: IInteractionPointIndex = {};\r\n  public keyIndex: IKeyIndex = {};\r\n  public mousePoint: IInteractionPoint = {\r\n    active: null,\r\n    captured: false,\r\n    clicked: false,\r\n    down: false,\r\n    firstDown: false,\r\n    hover: null,\r\n    id: \"mouse\",\r\n    tx: 0,\r\n    ty: 0,\r\n    type: \"Mouse\",\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n\r\n  public mouseDownEvent: EventEmitter<IMouseDownEvent> = new EventEmitter<IMouseDownEvent>();\r\n  public mouseUpEvent: EventEmitter<IMouseUpEvent> = new EventEmitter<IMouseUpEvent>();\r\n  public mouseMoveEvent: EventEmitter<IMouseMoveEvent> = new EventEmitter<IMouseMoveEvent>();\r\n\r\n  public touchCancelEvent: EventEmitter<ITouchCancelEvent> = new EventEmitter<ITouchCancelEvent>();\r\n  public touchEndEvent: EventEmitter<ITouchEndEvent> = new EventEmitter<ITouchEndEvent>();\r\n  public touchMoveEvent: EventEmitter<ITouchMoveEvent> = new EventEmitter<ITouchMoveEvent>();\r\n  public touchStartEvent: EventEmitter<ITouchStartEvent> = new EventEmitter<ITouchStartEvent>();\r\n\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n\r\n  private events: IInteractionPointEvent[] = [\r\n    { target: null, event: \"mousedown\", listener: e => this.mouseDown(e as MouseEvent) },\r\n    { target: document.body, event: \"mouseup\", listener: e => this.mouseUp(e as MouseEvent) },\r\n    { target: null, event: \"mousemove\", listener: e => this.mouseMove(e as MouseEvent) },\r\n    { target: null, event: \"touchstart\", listener: e => this.touchStart(e as TouchEvent) },\r\n    { target: document.body, event: \"touchend\", listener: e => this.touchEnd(e as TouchEvent) },\r\n    { target: null, event: \"touchmove\", listener: e => this.touchMove(e as TouchEvent) },\r\n    { target: document.body, event: \"touchcancel\", listener: e => this.touchCancel(e as TouchEvent) },\r\n  ];\r\n  private keyboardEvents: IKeyboardEvent[] = [\r\n    { target: document.body, event: \"keydown\", listener: e => this.keyDown(e as KeyboardEvent) },\r\n    { target: document.body, event: \"keyup\", listener: e => this.keyUp(e as KeyboardEvent) },\r\n  ];\r\n\r\n  constructor(props: IInteractionManagerProps) {\r\n    super(props);\r\n    this.canvas = props.canvas;\r\n    if (!this.canvas) {\r\n      this.canvas = document.createElement(\"canvas\");\r\n      document.body.appendChild(this.canvas);\r\n    }\r\n    this.canvas.width = props.width;\r\n    this.canvas.height = props.height;\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.hookEvents();\r\n    this.addPoint(this.mousePoint);\r\n  }\r\n\r\n  public hookEvents(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n    this.keyboardEvents.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public dispose(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .removeEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public mouseDown(event: MouseEvent): void {\r\n    this.mouseDownEvent.emit({\r\n      down: true,\r\n      eventType: \"MouseDown\",\r\n      rawEvent: event,\r\n      source: this,\r\n      stage: this,\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n    return this.pointDown(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseUp(event: MouseEvent): void {\r\n    return this.pointUp(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseMove(event: MouseEvent): void {\r\n    return this.pointMove(this.mousePoint, event);\r\n  }\r\n\r\n  public touchStart(event: TouchEvent): void {\r\n    let touch: Touch;\r\n    let point: IInteractionPoint;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchStartEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchStart\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.addTouchPoint(touch);\r\n      this.pointDown(point, touch);\r\n    }\r\n  }\r\n\r\n  public touchEnd(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchEndEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchEnd\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointUp(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchCancel(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchCancelEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchCancel\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: null,\r\n        y: null,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointCancel(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchMove(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchMoveEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchMove\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointMove(point, touch);\r\n    }\r\n  }\r\n  public pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const alreadyDown = point.down;\r\n    if (!alreadyDown) {\r\n      point.down = true;\r\n      point.firstDown = true;\r\n    }\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    this.pointMove(point, position);\r\n    if (alreadyDown) {\r\n      return;\r\n    }\r\n    if (point.hover) {\r\n      point.active = point.hover;\r\n      point.active.down = true;\r\n      point.active.active = true;\r\n      this.setFocus(point.hover);\r\n      point.active.pointDownEvent.emit({\r\n        down: true,\r\n        eventType: \"PointDown\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.y,\r\n      });\r\n    }\r\n    this.pointDownEvent.emit({\r\n      down: true,\r\n      eventType: \"PointDown\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: point.active,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n    point.firstDown = false; // after this point, the point will not be considered \"just recently pressed\"\r\n  }\r\n\r\n  public pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    let source: ISprite = null;\r\n    this.pointMove(point, position);\r\n    if (!point.down) {\r\n      return;\r\n    }\r\n    point.down = false;\r\n    if (point.active) {\r\n      point.active.down = false;\r\n      point.active.active = false;\r\n      point.active.pointUpEvent.emit({\r\n        down: false,\r\n        eventType: \"PointUp\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.x,\r\n      });\r\n\r\n      if (point.hover === point.active) {\r\n        point.active.pointClickEvent.emit({\r\n          down: false,\r\n          eventType: \"PointClick\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: point.active,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.x,\r\n        });\r\n      }\r\n      source = point.active;\r\n      point.active = null;\r\n    }\r\n\r\n    this.pointUpEvent.emit({\r\n      down: false,\r\n      eventType: \"PointUp\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: source || this,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.x,\r\n    });\r\n}\r\n\r\n  public pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const now = Date.now();\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    point.x = position.clientX - rect.left;\r\n    point.y = position.clientY - rect.top;\r\n\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n    // sprites sorted by ascending z level\r\n    // REASON: Higher z levels are drawn last, so forward-iterating through the\r\n    // array and drawing the sprites will yield the correct result.\r\n    this.sprites.sort(zSort);\r\n\r\n    // find the highest z level sprite the point collides with\r\n    // loop is reversed due to z levels being sorted ascendingly\r\n    let sprite: ISprite;\r\n    let hoveringSprite: ISprite;\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n      hoveringSprite = sprite.isHovering(point, now);\r\n\r\n      if (hoveringSprite) {\r\n        hoveringSprite.hover = true;\r\n        point.hover = hoveringSprite; // this can later be used by pointDown and pointUp\r\n        hoveringSprite.pointCollision(point);\r\n        hoveringSprite.pointMoveEvent.emit({\r\n          down: point.down,\r\n          eventType: \"PointMove\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: sprite,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.y,\r\n        });\r\n        break; // we've found the highest z level sprite the point collides with\r\n      }\r\n    }\r\n    this.pointMoveEvent.emit({\r\n      down: point.down,\r\n      eventType: \"PointMove\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: sprite,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n  }\r\n\r\n  public pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    if (point.active) {\r\n      point.active.active = false;\r\n      point.active = null;\r\n    }\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n  }\r\n\r\n  public createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint {\r\n    const point: IInteractionPoint = {\r\n      active: null,\r\n      captured: false,\r\n      clicked: false,\r\n      down: false,\r\n      firstDown: false,\r\n      hover: null,\r\n      id,\r\n      tx: 0,\r\n      ty: 0,\r\n      type,\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n\r\n    return point;\r\n  }\r\n\r\n  public addTouchPoint(touch: Touch): IInteractionPoint {\r\n    const point = this.createInteractionPoint(touch.identifier.toString(), \"Touch\");\r\n    this.addPoint(point);\r\n    this.touchPointIndex[touch.identifier] = point;\r\n    return point;\r\n  }\r\n\r\n  public removeTouchPoint(touch: Touch): void {\r\n    const point: IInteractionPoint = this.touchPointIndex[touch.identifier];\r\n    delete this.touchPointIndex[touch.identifier];\r\n    this.removePoint(point);\r\n  }\r\n\r\n  public hoverCheck(now: number): void {\r\n    let point: IInteractionPoint;\r\n    let sprite: ISprite;\r\n\r\n    for (point of this.points) {\r\n      if (point.hover) {\r\n        point.hover.hover = false;\r\n        point.hover = null;\r\n      }\r\n\r\n      for (sprite of this.sprites) {\r\n        if (sprite.isHovering(point, now)) {\r\n          sprite.pointCollision(point);\r\n          point.hover = sprite;\r\n          sprite.hover = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public keyUp(e: KeyboardEvent): void {\r\n    this.keyUpEvent.emit({\r\n      down: false,\r\n      eventType: \"KeyUp\",\r\n      key: e.key,\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    this.keyIndex[e.key] = false;\r\n  }\r\n\r\n  public keyDown(e: KeyboardEvent): void {\r\n    this.keyIndex[e.key] = true;\r\n    this.keyDownEvent.emit({\r\n      down: true,\r\n      eventType: \"KeyDown\",\r\n      key: e.key,\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.focused) {\r\n        sprite.keyDownEvent.emit({\r\n          down: true,\r\n          eventType: \"KeyDown\",\r\n          key: e.key,\r\n          source: sprite,\r\n          stage: this,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public setFocus(target: ISprite): void {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focus(target);\r\n    }\r\n  }\r\n}\r\n","import { TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ILabel extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ILabelProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class Label extends Sprite implements ILabel {\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public textAlign: TextAlign = TextAlign.start;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n\r\n  constructor(props: ILabelProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n  }\r\n\r\n  public update(): void {\r\n    this.height = this.fontSize;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    this.width = tempctx.measureText(this.text).width;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.translate(this.textures[this.texture].width * 0.5, this.textures[this.texture].height * 0.5);\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { transformPoint } from \"../matrix\";\r\nimport {  IInteractionPoint } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst sortZ = (a: ISprite, b: ISprite): number => a.z - b.z;\r\n\r\nexport interface IPanel extends ISprite {\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n}\r\n\r\nexport interface IPanelProps extends ISpriteProps {\r\n  sprites?: ISprite[];\r\n}\r\n\r\nexport class Panel extends Sprite implements IPanel {\r\n  private sprites: ISprite[] = [];\r\n\r\n  constructor(props: IPanelProps) {\r\n    super(props);\r\n    this.sprites = props.sprites || this.sprites;\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    sprite.parent = this;\r\n    this.sprites.push(sprite);\r\n    return this;\r\n  }\r\n\r\n  public interpolate(now: number) {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    super.interpolate(now);\r\n    for (const sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.parent = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    this.sprites.sort(sortZ);\r\n\r\n    for (const sprite of this.sprites) {\r\n      sprite.down = false;\r\n      sprite.hover = false;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    let sprite: ISprite = null;\r\n    let collision: ISprite = null;\r\n\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n\r\n      // the sprites inverse has already been calculated relative to the parent\r\n      transformPoint(point, sprite.inverse);\r\n\r\n      if (!sprite.broadPhase(point)) {\r\n        continue;\r\n      }\r\n\r\n      collision = sprite.narrowPhase(point);\r\n      if (collision) {\r\n        return collision;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  public update(): void {\r\n    this.hover = false;\r\n    for (const sprite of this.sprites) {\r\n      sprite.update();\r\n\r\n      if (sprite.hover) {\r\n        this.hover = sprite.hover;\r\n        this.cursor = sprite.cursor;\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(0, 0, this.width, this.height);\r\n    ctx.clip();\r\n\r\n    for (const sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.transform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha *= sprite.interpolatedAlpha;\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  public focus(target: ISprite) {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focus(target);\r\n    }\r\n    super.focus(target);\r\n  }\r\n  public skipAnimation(now: number): boolean {\r\n    let result: boolean = super.skipAnimation(now);\r\n    for (const sprite of this.sprites) {\r\n      result = sprite.skipAnimation(now) || result;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { IAudio, IAudioProps, ISoundSpriteSheet, PlayState } from \"../util\";\r\n\r\nexport interface ISFX extends IAudio {\r\n  loop: false; // it will always be false\r\n}\r\n\r\nexport interface ISFXProps extends IAudioProps {\r\n}\r\n\r\nexport interface ILoadSFXProps {\r\n  name: string;\r\n  texture: string;\r\n}\r\n\r\nexport class SFXSprite implements ISFX {\r\n\r\n  // fields from IPlayable\r\n  public started: number = 0;\r\n  public length: number = 0;\r\n  public start: number = 0;\r\n  public end: number = 0;\r\n  public loop: false = false;\r\n  public state: PlayState = PlayState.Stopped; // unused\r\n  public loaded: Promise<void>;\r\n\r\n  // fields from IAudio\r\n  public gain: GainNode;\r\n  public source: AudioBuffer;\r\n  public destination: AudioNode;\r\n  public definition: ISoundSpriteSheet;\r\n  public context: AudioContext;\r\n  /**\r\n   * 1. sets all relevant metadata properties from spritesheet\r\n   * 2. creates gain node from context\r\n   * 3. set this.loaded to result of createSource(props.source, props.context);\r\n   * 4. set this.destination\r\n   */\r\n  constructor(props: ISFXProps) {\r\n    // TODO: 1\r\n    this.context = props.context;\r\n    this.definition = props.definition;\r\n    this.start = this.definition.spritemap[props.texture].start;\r\n    this.end = this.definition.spritemap[props.texture].end;\r\n    this.length = this.end - this.start;\r\n    this.gain = props.context.createGain();\r\n    this.loaded = this.createSource(props.source, props.context);\r\n    this.destination = props.context.destination;\r\n  }\r\n\r\n  // calls this.loaded.then(e => this.createPlayInstance());\r\n  public play(): this {\r\n    this.loaded.then(e => this.createPlayInstance());\r\n    return this;\r\n  }\r\n\r\n  // no ops\r\n  public stop(): this {\r\n    return this;\r\n  }\r\n  public pause(): this {\r\n    return this;\r\n  }\r\n\r\n  // sets the gainNode.gain.value property\r\n  // accepts [0..1]\r\n  public setVolume(volume: number): this {\r\n    if (volume < 0 || volume > 1) {\r\n      throw new Error(`setVolume() accepts a number between 0 and 1; got ${volume}.`);\r\n    }\r\n    this.gain.gain.value = volume;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 1. resolves response to arrayBuffer\r\n   * 2. creates audioBuffer\r\n   * 3. creates AudioBufferSourceNode\r\n   * 4. sets source property\r\n   */\r\n  private async createSource(res: Promise<Response>, context: AudioContext): Promise<void> {\r\n    const resp: Response = await res;\r\n    const buffer = await resp.arrayBuffer();\r\n    this.source = await context.decodeAudioData(buffer);\r\n  }\r\n\r\n  /**\r\n   * 1. creates new AudioBufferSourceNode\r\n   * 2. set node.buffer = this.source\r\n   * 3. set source metadata\r\n   * 4. connect node to destination\r\n   * 5. call start(0, offset, duration)\r\n   * 6. listen to ended event (look up the event)\r\n   * 7. clean up audio source node and disconnect it from the destination\r\n   */\r\n  private createPlayInstance(): void {\r\n    const node = this.context.createBufferSource();\r\n    node.buffer = this.source;\r\n    node.loop = this.loop; // false\r\n    // TODO: 3\r\n    node.connect(this.gain);\r\n\r\n    const now = Date.now();\r\n    node.start(0, this.start, this.length);\r\n\r\n    const gain = this.gain; // must be accessed inside of named function\r\n    node.addEventListener(\"ended\", function callback(e) {\r\n      node.disconnect(gain);\r\n      node.removeEventListener(\"ended\", callback);\r\n    });\r\n  }\r\n}\r\n","import { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport { Cursor, IInteractionPoint } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ISlider extends ISprite {\r\n  value: number;\r\n  max: number;\r\n  min: number;\r\n  width: number;\r\n\r\n  valueChangeEvent: EventEmitter<IValueChangeEvent<number>>;\r\n}\r\n\r\nexport interface ISliderProps extends ISpriteProps {\r\n  value?: number;\r\n  max?: number;\r\n  min?: number;\r\n  width: number;\r\n}\r\n\r\nexport class Slider extends Sprite implements ISlider {\r\n  public value: number = 0;\r\n  public max: number = 1;\r\n  public min: number = 0;\r\n  public width: number = 100;\r\n\r\n  public valueChangeEvent: EventEmitter<IValueChangeEvent<number>> = new EventEmitter<IValueChangeEvent<number>>();\r\n\r\n  private sliderPattern: CanvasPattern = null;\r\n  private pillTexture: ImageBitmap = null;\r\n\r\n  constructor(props: ISliderProps) {\r\n    super(props);\r\n\r\n    this.height = props.textures.Pill_Hover.height;\r\n    this.width = props.width;\r\n    this.max = props.max || this.max;\r\n    this.min = props.min || this.min;\r\n    this.value = props.value || this.value;\r\n\r\n    this.sliderPattern = document\r\n      .createElement(\"canvas\")\r\n      .getContext(\"2d\")\r\n      // @ts-ignore: Dom Spec Outdated. ImageBitmap is acceptable parameter for createPattern.\r\n      .createPattern(props.textures.Line, \"repeat-x\");\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    if (this.active) {\r\n      return true;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    if (this.active || point.firstDown) {\r\n      return this;\r\n    }\r\n\r\n    /*\r\n     * NOTE: this checks if the cursor is strictly hovering over the pill\r\n     */\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    if (point.ty <= this.textures.Pill_Hover.height\r\n        && point.ty >= 0\r\n        && point.tx >= valueX\r\n        && point.tx <= valueX + this.textures.Pill_Hover.width) {\r\n        return this;\r\n      }\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    super.pointCollision(point);\r\n\r\n    if (this.active && point.active === this) {\r\n      const previousValue = this.value;\r\n      const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n      const trueTX = point.tx - this.textures.Pill_Hover.width * 0.5;\r\n      const clampedTX = Math.max(0, Math.min(trueTX, sliderDistance));\r\n      const range = this.max - this.min;\r\n\r\n      this.value = this.min + range * clampedTX / sliderDistance;\r\n      if (this.value !== previousValue) {\r\n        this.valueChangeEvent.emit({\r\n          eventType: \"ValueChange\",\r\n          previousValue,\r\n          property: \"value\",\r\n          source: this,\r\n          stage: this.container,\r\n          value: this.value,\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public update(): void {\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    this.pillTexture = this.active\r\n      ? this.textures.Pill_Active\r\n      : (this.hover ? this.textures.Pill_Hover : this.textures.Pill);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures.Line_Cap_Left, 0, 0);\r\n    ctx.drawImage(\r\n      this.textures.Line_Cap_Right,\r\n      this.width - this.textures.Line_Cap_Right.width,\r\n      0,\r\n    );\r\n    ctx.fillStyle = this.sliderPattern;\r\n    ctx.fillRect(\r\n      this.textures.Line_Cap_Left.width,\r\n      0,\r\n      this.width - this.textures.Line_Cap_Left.width - this.textures.Line_Cap_Right.width,\r\n      this.textures.Line.height,\r\n    );\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    ctx.drawImage(this.pillTexture, valueX, 0);\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IPostHoverCheckEvent,\r\n  IPostInterpolateEvent,\r\n  IPostRenderEvent,\r\n  IPostUpdateEvent,\r\n  IPreHoverCheckEvent,\r\n  IPreInterpolateEvent,\r\n  IPreRenderEvent,\r\n  IPreUpdateEvent,\r\n} from \"../events\";\r\nimport { Cursor } from \"../util\";\r\nimport { IInteractionManager, IInteractionManagerProps, InteractionManager } from \"./InteractionManager\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IStageProps extends IInteractionManagerProps {\r\n\r\n}\r\n\r\nexport interface IStage extends IInteractionManager {\r\n  postInterpolateEvent: EventEmitter<IPostInterpolateEvent>;\r\n  preInterpolateEvent: EventEmitter<IPreInterpolateEvent>;\r\n  preUpdateEvent: EventEmitter<IPreUpdateEvent>;\r\n  postUpdateEvent: EventEmitter<IPostUpdateEvent>;\r\n  preRenderEvent: EventEmitter<IPreRenderEvent>;\r\n  postRenderEvent: EventEmitter<IPostRenderEvent>;\r\n  update(): this;\r\n  render(): this;\r\n  skipAnimations(): boolean;\r\n}\r\n\r\nexport class Stage extends InteractionManager implements IStage {\r\n  public postInterpolateEvent: EventEmitter<IPostInterpolateEvent> = new EventEmitter<IPostInterpolateEvent>();\r\n  public preInterpolateEvent: EventEmitter<IPreInterpolateEvent> = new EventEmitter<IPreInterpolateEvent>();\r\n  public preHoverCheckEvent: EventEmitter<IPreHoverCheckEvent> = new EventEmitter<IPreHoverCheckEvent>();\r\n  public postHoverCheckEvent: EventEmitter<IPostHoverCheckEvent> = new EventEmitter<IPostHoverCheckEvent>();\r\n  public preUpdateEvent: EventEmitter<IPreUpdateEvent> = new EventEmitter<IPreUpdateEvent>();\r\n  public postUpdateEvent: EventEmitter<IPostUpdateEvent> = new EventEmitter<IPostUpdateEvent>();\r\n  public preRenderEvent: EventEmitter<IPreRenderEvent> = new EventEmitter<IPreRenderEvent>();\r\n  public postRenderEvent: EventEmitter<IPostRenderEvent> = new EventEmitter<IPostRenderEvent>();\r\n\r\n  constructor(props: IStageProps) {\r\n    super(props);\r\n  }\r\n  public update(): this {\r\n    const now = Date.now();\r\n    let sprite: ISprite;\r\n\r\n    this.preInterpolateEvent.emit({\r\n      eventType: \"PreInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    for (sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n    this.postInterpolateEvent.emit({\r\n      eventType: \"PostInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preHoverCheckEvent.emit({\r\n      eventType: \"PreHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    this.hoverCheck(now);\r\n    this.postHoverCheckEvent.emit({\r\n      eventType: \"PostHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preUpdateEvent.emit({\r\n      eventType: \"PreUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    for (sprite of this.sprites) {\r\n      sprite.update();\r\n    }\r\n\r\n    this.postUpdateEvent.emit({\r\n      eventType: \"PostUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(): this {\r\n    this.preRenderEvent.emit({\r\n      eventType: \"PreRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    let sprite: ISprite;\r\n    let pointer: Cursor = Cursor.auto;\r\n    const ctx = this.ctx;\r\n\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    for (sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.setTransform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha = sprite.interpolatedPosition[6];\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n      pointer = pointer || (sprite.hover && sprite.cursor);\r\n    }\r\n\r\n    this.canvas.style.cursor = pointer;\r\n\r\n    this.postRenderEvent.emit({\r\n      eventType: \"PostRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public skipAnimations(): boolean {\r\n    const now = Date.now();\r\n    let result = false;\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.skipAnimation(now)) {\r\n        result = true;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","\r\nimport { IPadding, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport interface ITextbox extends ISprite {\r\n  text: string;\r\n  textSpeed: number;\r\n  textIndex: number;\r\n  padding: IPadding;\r\n  fontSize: number;\r\n  font: string;\r\n  fontColor: string;\r\n  lineHeight: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  setText(text: string): this;\r\n  appendText(text: string): this;\r\n}\r\n\r\nexport interface ITextboxProps extends ISpriteProps {\r\n  text?: string;\r\n  textSpeed?: number;\r\n  textIndex?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n  padding?: IPadding;\r\n  fontSize?: number;\r\n  font?: string;\r\n  fontColor?: string;\r\n  lineHeight?: number;\r\n}\r\n\r\nexport class Textbox extends Sprite implements ITextbox {\r\n  private static regex: RegExp = /\\r\\n|\\r|\\n|[^\\t ]*[\\t ]?/g;\r\n\r\n  public text: string = \"\";\r\n  public textSpeed: number = 1;\r\n  public textIndex: number = 0;\r\n  public padding: IPadding = {\r\n    bottom: 5,\r\n    left: 5,\r\n    right: 5,\r\n    top: 5,\r\n  };\r\n  public fontSize: number = 12;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public lineHeight: number = 16;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n  private interpolatedText: string[] = [\"\"];\r\n\r\n  constructor(props: ITextboxProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.textSpeed = props.textSpeed || this.textSpeed;\r\n    if (props.hasOwnProperty(\"textIndex\")) {\r\n      this.textIndex = props.textIndex;\r\n    }\r\n    this.padding = props.padding || this.padding;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.lineHeight = props.lineHeight || this.lineHeight;\r\n\r\n    this.setTexture(\"Texture\");\r\n  }\r\n\r\n  public update() {\r\n    const maxWidth = this.textures[this.texture].width - this.padding.left - this.padding.right;\r\n    this.textIndex = Math.min(this.text.length, this.textIndex + this.textSpeed);\r\n    const words = this.text.match(Textbox.regex);\r\n    this.interpolatedText = [\"\"];\r\n    const maxLines = (this.textures[this.texture].height - this.padding.top - this.padding.bottom) / this.lineHeight;\r\n    let line: string = \"\";\r\n    let lineIndex: number = 0;\r\n    let measurement: TextMetrics;\r\n    let leftOver: number = this.textIndex;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n\r\n    for (const word of words) {\r\n\r\n      // If the next character is a newline, push a new line\r\n      if (word === \"\\n\" || word === \"\\r\\n\" || word === \"\\r\") {\r\n        this.interpolatedText.push(\"\");\r\n        leftOver -= word.length;\r\n        lineIndex += 1;\r\n        continue;\r\n      }\r\n\r\n      line = this.interpolatedText[lineIndex];\r\n\r\n      // If there are no more characters to push, break\r\n      if (leftOver === 0) {\r\n        break;\r\n      }\r\n\r\n      // If the line count is greater than the maximum number of lines, break\r\n      if ((lineIndex + 1) > maxLines) {\r\n        break;\r\n      }\r\n\r\n      // Test the word length\r\n      line += word;\r\n      measurement = tempctx.measureText(line);\r\n\r\n      // If the line overflows\r\n      if (measurement.width > maxWidth) {\r\n        lineIndex = this.interpolatedText.push(\"\") - 1;\r\n      }\r\n\r\n      this.interpolatedText[lineIndex] += word;\r\n      // Add the text to the screen\r\n\r\n      leftOver -= word.length;\r\n\r\n      if (leftOver < 0) {\r\n        this.interpolatedText[lineIndex] = this.interpolatedText[lineIndex].slice(0, leftOver);\r\n        break;\r\n      }\r\n      // Check to see if the word overFlows the animation\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D) {\r\n    super.render(ctx);\r\n    const maxHeight = this.textures[this.texture].height - this.padding.top;\r\n    let currentHeight = this.padding.top;\r\n\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.bottom,\r\n      this.width - this.padding.right,\r\n      this.height - this.padding.top,\r\n    );\r\n    ctx.clip();\r\n    for (const line of this.interpolatedText) {\r\n      if (currentHeight + this.fontSize > maxHeight) {\r\n        break;\r\n      }\r\n\r\n      ctx.fillText(line, this.padding.left, currentHeight);\r\n      currentHeight += this.lineHeight;\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    if (text.startsWith(this.text)) {\r\n      this.text = text;\r\n      return this;\r\n    }\r\n\r\n    this.text = text;\r\n    this.interpolatedText = [\"\"];\r\n    this.textIndex = 0;\r\n    return this;\r\n  }\r\n\r\n  public appendText(text: string): this {\r\n    this.text += text;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = super.skipAnimation(now) && this.textIndex < this.text.length;\r\n    this.textIndex = this.text.length;\r\n    return result;\r\n  }\r\n}\r\n","import { TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ITextInput extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  caretIndex: number;\r\n  caretX: number;\r\n  selection: [number, number];\r\n  textScroll: number;\r\n  padding: [number, number, number, number];\r\n  frameCount: number;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ITextInputProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class TextInput extends Sprite implements ITextInput {\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public caretIndex: number = 0;\r\n  public caretX: number = 0;\r\n  public selection: [number, number] = [0, 0];\r\n  public textScroll: number = 0;\r\n  public padding: [number, number, number, number] = [2, 2, 2, 2];\r\n  public frameCount: number = 0;\r\n  private showCaret: boolean = true;\r\n\r\n  constructor(props: ITextInputProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.width = props.width || this.width;\r\n    this.height = props.height || this.height;\r\n  }\r\n\r\n  public update(): void {\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    const textWidth: number = tempctx.measureText(this.text).width;\r\n    this.caretX = tempctx.measureText(this.text.slice(0, this.caretIndex)).width;\r\n    const relativeCaretX: number = this.caretX + this.textScroll;\r\n    const maxTextWidth: number  = this.width - this.padding[0] - this.padding[1];\r\n\r\n    if (relativeCaretX < 0) {\r\n      console.log(\"hit less than 0\");\r\n      this.textScroll += relativeCaretX;\r\n    } else if (relativeCaretX > maxTextWidth) {\r\n      console.log(\"hit greater than\");\r\n      this.textScroll -= relativeCaretX - maxTextWidth;\r\n    }\r\n\r\n    this.frameCount += 1;\r\n    if (this.frameCount >= 30) {\r\n      this.frameCount = 0;\r\n      this.showCaret = !this.showCaret;\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(0, 0, this.width, this.height);\r\n\r\n    // clip\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding[0],\r\n      this.padding[2],\r\n      this.width - this.padding[1] - this.padding[0],\r\n      this.width - this.padding[3],\r\n    );\r\n    ctx.clip();\r\n\r\n    // draw text\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textBaseline = TextBaseline.top;\r\n    ctx.fillText(this.text, this.textScroll + this.padding[0], 0);\r\n\r\n    if (this.showCaret) {\r\n      const caretX = this.textScroll + this.padding[0] + this.caretIndex;\r\n      ctx.beginPath();\r\n      ctx.moveTo(caretX, this.padding[2]);\r\n      ctx.lineTo(caretX, this.height - this.padding[3]);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n"],"names":["PI","Math","TAU","inFunc","ratio","outFunc","inverse","easeLinear","easeInQuad","easeOutQuad","easeInOutQuad","inOut","easeInCub","easeOutCub","easeInOutCub","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutSin","sin","easeInSin","easeInOutSin","easeOutElastic","pow","p","easeInElastic","easeInOutElastic","value","immutable","this","Float64Array","Identity","Matrix","x","y","m","translate","scale","angle","rotate","skewX","skewY","props","transform","chain","reset","target","set","matrix","setMatrix","a","b","c","d","e","f","det","IdentityMatrix","cos","tan","pa","pb","pc","pd","pe","pf","ma","mb","mc","md","me","mf","point","tx","ty","source","i","length","SpriteSheetKind","points","points_1","tslib_1.__values","transformPoint","definitionPromise","imgPromise","textures","definition","_q","img","kind","JSON","JSON_TP_Array","JSON_TP_Hash","jsonKind","jsonKind_1","_e","_f","frame","name","createImageBitmap","width","height","spritesheetArrayKind","_g","frames","_j","_k","arrayFrame","filename","w","h","spritesheetHashKind","_l","Object","keys","spriteFrame","_o","_p","TextAlign","TextBaseline","PlayState","Cursor","url","opts","fetch","_b","json","Array","isArray","Symbol","iterator","prototype","result","Error","meta","_a","blob","left","right","z","EventEmitter","callbacks","callback","push","dispose","_this","includes","splice","indexOf","Promise","resolve","reject","disposer","listen","event","events","slice","eases.easeLinear","auto","id","position","m.Identity","m.set","previousPosition","interpolatedPosition","hasOwnProperty","previousAlpha","alpha","interpolatedAlpha","loadTexture","Sprite","now","interpolate","m.transformPoint","broadPhase","narrowPhase","sx","s","sy","move","m.chain","r","cx","cy","timespan","wait","ease","animationLength","animationStart","Date","lastInterpolated","progress","j","m.inverse","parent","texture","ctx","drawImage","focused","defintion","createTextureMap","_c","loadedEvent","emit","_d","container","_super","center","middle","selected","font","fontColor","fontSize","text","textAlign","textBaseline","tslib_1.__extends","Button","setTexture","active","hover","cursor","pointer","update","render","fillStyle","fillText","displayName","color","checked","Boolean","Checkbox","clicked","toggle","pointCollision","Close","audioContext","AudioContext","Container","sprite","sprites","playables","captured","down","firstDown","type","listener","mouseDown","document","body","mouseUp","mouseMove","touchStart","touchEnd","touchMove","touchCancel","keyDown","keyUp","canvas","createElement","appendChild","getContext","hookEvents","addPoint","mousePoint","InteractionManager","forEach","addEventListener","keyboardEvents","removeEventListener","mouseDownEvent","eventType","rawEvent","stage","clientX","clientY","pointDown","pointUp","pointMove","touch","changedTouches","touchStartEvent","addTouchPoint","touchEndEvent","touchPointIndex","identifier","removeTouchPoint","touchCancelEvent","pointCancel","touchMoveEvent","alreadyDown","previousX","previousY","setFocus","pointDownEvent","pointUpEvent","pointClickEvent","hoveringSprite","rect","getBoundingClientRect","top","sort","zSort","isHovering","pointMoveEvent","createInteractionPoint","toString","removePoint","keyUpEvent","key","keyIndex","keyDownEvent","focus","tempctx","start","hanging","Label","measureText","sortZ","Panel","collision","beginPath","clip","save","globalAlpha","restore","skipAnimation","Stopped","context","spritemap","end","gain","createGain","loaded","createSource","destination","SFXSprite","then","createPlayInstance","volume","res","arrayBuffer","buffer","decodeAudioData","node","createBufferSource","loop","connect","disconnect","Pill_Hover","max","min","sliderPattern","createPattern","Line","Slider","valueX","previousValue","sliderDistance","clampedTX","valueChangeEvent","property","pillTexture","Pill_Active","Pill","Line_Cap_Left","Line_Cap_Right","fillRect","Stage","preInterpolateEvent","postInterpolateEvent","preHoverCheckEvent","hoverCheck","postHoverCheckEvent","preUpdateEvent","postUpdateEvent","preRenderEvent","clearRect","setTransform","style","postRenderEvent","bottom","textSpeed","textIndex","padding","lineHeight","Textbox","maxWidth","words","match","regex","interpolatedText","maxLines","line","lineIndex","leftOver","words_1","word","maxHeight","currentHeight","startsWith","TextInput","caretX","caretIndex","relativeCaretX","textScroll","maxTextWidth","console","log","frameCount","showCaret","lineWidth","strokeRect","moveTo","lineTo","stroke"],"mappings":"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"}