{"version":3,"file":"senpai-stage.mjs","sources":["../src/ease/consts.ts","../src/ease/index.ts","../src/matrix/index.ts","../src/util/index.ts","../src/events/SenpaiEvent.ts","../src/view/Sprite.ts","../src/view/Button.ts","../src/view/Character.ts","../src/view/Checkbox.ts","../src/view/Close.ts","../src/view/Container.ts","../src/view/InteractionManager.ts","../src/view/Label.ts","../src/view/Panel.ts","../src/view/SFXSprite.ts","../src/view/Slider.ts","../src/view/Stage.ts","../src/view/Textbox.ts","../src/view/TextInput.ts"],"sourcesContent":["export const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\n","/****\r\n * Custom ease functions, designed with functional programming concepts.\r\n */\r\nimport { PI, TAU } from \"./consts\";\r\n\r\nfunction inverse(inFunc: (ratio: number) => number): (ratio: number) => number {\r\n  return function outFunc(ratio: number): number {\r\n    return 1 - inFunc(1 - ratio);\r\n  };\r\n}\r\n\r\nfunction inOut(inFunc: (ratio: number) => number): (ratio: number) => number {\r\n  const outFunc = inverse(inFunc);\r\n  return (ratio: number): number => ratio < 0.5\r\n    ? 0.5 * inFunc(ratio * 2)\r\n    : 0.5 + 0.5 * outFunc(2 * ratio - 1);\r\n}\r\n\r\nexport const easeLinear: (ratio: number) => number = function linear(ratio: number): number {\r\n  return ratio;\r\n};\r\n\r\nexport const easeInQuad: (ratio: number) => number = (ratio: number): number => ratio * ratio;\r\nexport const easeOutQuad: (ratio: number) => number = inverse(easeInQuad);\r\nexport const easeInOutQuad: (ratio: number) => number = inOut(easeInQuad);\r\n\r\nexport const easeInCub: (ratio: number) => number =\r\n  (ratio: number): number => ratio * ratio * ratio;\r\nexport const easeOutCub: (ratio: number) => number = inverse(easeInCub);\r\nexport const easeInOutCub: (ratio: number) => number = inOut(easeInCub);\r\n\r\nexport const easeInQuart: (ratio: number) => number =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio;\r\nexport const easeOutQuart: (ratio: number) => number = inverse(easeInQuart);\r\nexport const easeInOutQuart: (ratio: number) => number = inOut(easeInQuart);\r\n\r\nexport const easeInQuint: (ratio: number) => number =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio * ratio;\r\nexport const easeOutQuint: (ratio: number) => number = inverse(easeInQuint);\r\nexport const easeInOutQuint: (ratio: number) => number = inOut(easeInQuint);\r\n\r\nexport const easeOutSin: (ratio: number) => number =\r\n  (ratio: number): number => Math.sin(ratio * PI * 0.5);\r\nexport const easeInSin: (ratio: number) => number = inverse(easeOutSin);\r\nexport const easeInOutSin: (ratio: number) => number = inOut(easeInSin);\r\n\r\nconst p = 0.3;\r\nexport const easeOutElastic: (ratio: number) => number =\r\n  (ratio: number): number => Math.pow(2, -10 * ratio) * Math.sin((ratio - p / 4) * TAU / p) + 1;\r\nexport const easeInElastic: (ratio: number) => number = inverse(easeOutElastic);\r\nexport const easeInOutElastic: (ratio: number) => number = inOut(easeInElastic);\r\n","import { IInteractionPoint } from \"../util\";\r\n\r\nexport interface IMatrix {\r\n  value: number[] | Float64Array;\r\n  immutable: boolean;\r\n  translate(x: number, y: number): IMatrix;\r\n  scale(x: number, y: number): IMatrix;\r\n  rotate(angle: number): IMatrix;\r\n  skewX(angle: number): IMatrix;\r\n  skewY(angle: number): IMatrix;\r\n  transform(props: Float64Array | number[]): IMatrix;\r\n  inverse(): IMatrix;\r\n  reset(): IMatrix;\r\n  set(target: Float64Array | number[]): IMatrix;\r\n}\r\n\r\nexport class Matrix implements IMatrix {\r\n  public value: number[] | Float64Array = new Float64Array(Identity);\r\n  public immutable: boolean = false;\r\n\r\n  constructor(value?: number[] | Float64Array, immutable?: boolean) {\r\n    this.value = value || new Float64Array(Identity);\r\n    this.immutable = immutable || this.immutable;\r\n  }\r\n\r\n  public translate(x: number, y: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      translate(x, y, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    translate(x, y, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public scale(x: number, y: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      scale(x, y, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    scale(x, y, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public rotate(angle: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      rotate(angle, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    rotate(angle, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public skewX(angle: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      skewX(angle, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    skewX(angle, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public skewY(angle: number): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      skewY(angle, this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    skewY(angle, this.value, this.value);\r\n    return this;\r\n  }\r\n\r\n  public transform(props: Float64Array | number[]): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      transform(this.value, props, m.value);\r\n      return m;\r\n    }\r\n    transform(this.value, props, this.value);\r\n    return this;\r\n  }\r\n\r\n  public reset(): IMatrix {\r\n    if (this.immutable) {\r\n      return chain();\r\n    }\r\n    reset(this.value);\r\n    return this;\r\n  }\r\n\r\n  public set(target: Float64Array | number[]): IMatrix {\r\n    set(target, this.value);\r\n    return this;\r\n  }\r\n\r\n  public inverse(): IMatrix {\r\n    if (this.immutable) {\r\n      const m = new Matrix(this.value, true);\r\n      inverse(this.value, m.value);\r\n      return m;\r\n    }\r\n\r\n    inverse(this.value, this.value);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport function inverse(\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const a: number = matrix[0];\r\n  const b: number = matrix[1];\r\n  const c: number = matrix[2];\r\n  const d: number = matrix[3];\r\n  const e: number = matrix[4];\r\n  const f: number = matrix[5];\r\n  const det: number = 1 / (a * d - c * b);\r\n\r\n  setMatrix[0] = d * det;\r\n  setMatrix[1] = -b * det;\r\n  setMatrix[2] = -c * det;\r\n  setMatrix[3] = a * det;\r\n  setMatrix[4] = (c * f - e * d) * det;\r\n  setMatrix[5] = (e * b - a * f) * det;\r\n}\r\n\r\nexport const Identity = new Float64Array([1, 0, 0, 1, 0, 0]);\r\nexport const IdentityMatrix = new Matrix(Identity, true);\r\n\r\nexport function translate(\r\n  x: number,\r\n  y: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  setMatrix[0] = matrix[0];\r\n  setMatrix[1] = matrix[1];\r\n  setMatrix[2] = matrix[2];\r\n  setMatrix[3] = matrix[3];\r\n  setMatrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\r\n  setMatrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\r\n}\r\n\r\nexport function scale(\r\n  x: number,\r\n  y: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  setMatrix[0] = matrix[0] * x;\r\n  setMatrix[1] = matrix[1] * x;\r\n  setMatrix[2] = matrix[2] * y;\r\n  setMatrix[3] = matrix[3] * y;\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function rotate(\r\n  angle: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  const a = matrix[0];\r\n  const b = matrix[1];\r\n  const c = matrix[2];\r\n  const d = matrix[3];\r\n\r\n  setMatrix[0] = a * cos + c * sin;\r\n  setMatrix[1] = b * cos + d * sin;\r\n  setMatrix[2] = c * cos - a * sin;\r\n  setMatrix[3] = d * cos - b * sin;\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function skewX(\r\n  angle: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const tan = Math.tan(angle);\r\n\r\n  setMatrix[0] = matrix[0];\r\n  setMatrix[1] = matrix[1];\r\n  setMatrix[2] = matrix[2] + matrix[0] * tan;\r\n  setMatrix[3] = matrix[3] + matrix[1] * tan;\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function skewY(\r\n  angle: number,\r\n  matrix: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  const tan = Math.tan(angle);\r\n\r\n  setMatrix[0] = matrix[0] + matrix[2] * tan;\r\n  setMatrix[1] = matrix[1] + matrix[3] * tan;\r\n  setMatrix[2] = matrix[2];\r\n  setMatrix[3] = matrix[3];\r\n  setMatrix[4] = matrix[4];\r\n  setMatrix[5] = matrix[5];\r\n}\r\n\r\nexport function transform(\r\n  matrix: Float64Array | number[],\r\n  props: Float64Array | number[],\r\n  setMatrix: Float64Array | number[],\r\n): void {\r\n  // props values\r\n  const pa = props[0];\r\n  const pb = props[1];\r\n  const pc = props[2];\r\n  const pd = props[3];\r\n  const pe = props[4];\r\n  const pf = props[5];\r\n\r\n  // matrix values\r\n  const ma = matrix[0];\r\n  const mb = matrix[1];\r\n  const mc = matrix[2];\r\n  const md = matrix[3];\r\n  const me = matrix[4];\r\n  const mf = matrix[5];\r\n\r\n  setMatrix[0] = ma * pa + mc * pb;\r\n  setMatrix[1] = mb * pa + md * pb;\r\n  setMatrix[2] = ma * pc + mc * pd;\r\n  setMatrix[3] = mb * pc + md * pd;\r\n  setMatrix[4] = ma * pe + mc * pf + me;\r\n  setMatrix[5] = mb * pe + md * pf + mf;\r\n}\r\n\r\nexport function transformPoints(\r\n  points: IInteractionPoint[],\r\n  matrix: Float64Array | number[],\r\n): void {\r\n  for (const point of points) {\r\n    transformPoint(point, matrix);\r\n  }\r\n}\r\n\r\nexport function transformPoint(point: IInteractionPoint, matrix: Float64Array | number[]): void {\r\n  point.tx = matrix[0] * point.x + matrix[2] * point.y + matrix[4];\r\n  point.ty = matrix[1] * point.x + matrix[3] * point.y + matrix[5];\r\n}\r\n\r\nexport function set(target: Float64Array | number[], source: Float64Array | number[]): void {\r\n  for (let i = 0; i < target.length && i < source.length; i++) {\r\n    target[i] = source[i];\r\n  }\r\n}\r\n\r\nexport function reset(target: Float64Array | number[]): void {\r\n  return set(target, [1, 0, 0, 1, 0, 0]);\r\n}\r\n\r\nexport function chain(\r\n  value: Float64Array | number[] = Identity,\r\n  immutable: boolean = false,\r\n): IMatrix {\r\n  return new Matrix(value, immutable);\r\n}\r\n","import { ISprite } from \"../view/Sprite\";\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheet {\r\n  frames: ISpriteSheetFrameMap;\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport interface ISpriteSheetFrameMap {\r\n  [frame: string]: ISpriteSheetFrame;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSize;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrame {\r\n  frame: ISpriteSheetPoint & ISpriteSheetSize;\r\n  rotated: boolean;\r\n  trimmed: boolean;\r\n  spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSize;\r\n  sourceSize: ISpriteSheetSize;\r\n}\r\n\r\nexport interface ISpriteSheetSize {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ITextureMap {\r\n  [texture: string]: ImageBitmap;\r\n}\r\n\r\nexport interface IInteractionPoint extends IPoint {\r\n  id: string;\r\n  type: \"Touch\" | \"Mouse\";\r\n  down: boolean;\r\n  clicked: boolean;\r\n  captured: boolean;\r\n  active: ISprite;\r\n  hover: ISprite;\r\n  firstDown: boolean;\r\n  tx: number;\r\n  ty: number;\r\n}\r\n\r\nexport interface IPlayable {\r\n  started: number; // timestamp when the media last began playing\r\n  length: number; // media play length timespan\r\n  start: number; // media start time\r\n  end: number; // media end time\r\n  loop: boolean; // does this media loop?\r\n  state: PlayState; // self explainatory\r\n  loaded: Promise<void>; // this should be a promise that resolves once the audio has loaded\r\n  play(): this;\r\n  pause(): this;\r\n  stop(): this;\r\n  setVolume(volume: number); // accepts number [0. 1]\r\n}\r\n\r\nexport interface IAudio extends IPlayable {\r\n  gain: GainNode; // controls volume\r\n  source: AudioBuffer; // is null until the audioBuffer is loaded\r\n  destination: AudioNode;\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n}\r\n\r\nexport interface ISoundSpriteSheet {\r\n  resources: string[];\r\n  spritemap: {\r\n    [name: string]: ISoundSpriteSheetTexture;\r\n  };\r\n}\r\n\r\nexport interface ISoundSpriteSheetTexture {\r\n  start: number;\r\n  end: number;\r\n  loop: boolean;\r\n}\r\n\r\nexport interface IAudioProps extends IPlayableProps {\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n  name: string; // determines the name of the audio clip\r\n}\r\n\r\nexport interface IPlayableProps {\r\n  source: Promise<Response>;\r\n  texture: string; // this should be name of the texture in the spritesheet\r\n}\r\n\r\nexport interface IKeyState {\r\n  key: string;\r\n  down: boolean;\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IPadding {\r\n  left: number;\r\n  right: number;\r\n  top: number;\r\n  bottom: number;\r\n}\r\n\r\nexport async function createTextureMap(definition: ISpriteSheet, img: Promise<ImageBitmap>) {\r\n  const textures: ITextureMap = {};\r\n  await Promise.all(\r\n    Object.entries(definition.frames).map(async ([desc, frame], i) => {\r\n      textures[desc] = await createImageBitmap(\r\n        await img,\r\n        frame.frame.x,\r\n        frame.frame.y,\r\n        frame.frame.w,\r\n        frame.frame.h,\r\n      );\r\n    }),\r\n  );\r\n  return textures;\r\n}\r\n\r\nexport async function loadImage(src: string): Promise<ImageBitmap> {\r\n  const res = await fetch(src);\r\n  const blob = await res.blob();\r\n  const bmp = await createImageBitmap(blob);\r\n  return bmp;\r\n}\r\n\r\n/**\r\n * Sort by z level in ascending order.\r\n */\r\nexport function zSort(left: ISprite, right: ISprite): number {\r\n  return left.z - right.z;\r\n}\r\n\r\nexport enum TextAlign {\r\n  \"left\" = \"left\",\r\n  \"right\" = \"right\",\r\n  \"center\" = \"center\",\r\n  \"start\" = \"start\",\r\n  \"end\" = \"end\",\r\n}\r\n\r\nexport enum TextBaseline {\r\n  \"top\" = \"top\",\r\n  \"hanging\" = \"hanging\",\r\n  \"middle\" = \"middle\",\r\n  \"alphabetic\" = \"alphabetic\",\r\n  \"ideographic\" = \"ideographic\",\r\n  \"bottom\" = \"bottom\",\r\n}\r\n\r\nexport enum PlayState {\r\n  Playing,\r\n    Paused,\r\n    Stopped,\r\n}\r\n","import { ISprite } from \"../view/Sprite\";\r\nimport { IStage } from \"../view/Stage\";\r\n\r\nexport type EventCallback<T> = (events: T) => void;\r\n\r\nexport interface ISenpaiEvent {\r\n  eventType: string;\r\n  stage: IStage;\r\n  source: ISprite | IStage;\r\n}\r\n\r\nexport interface IValueChangeEvent<T> extends ISenpaiEvent {\r\n  eventType: \"ValueChange\";\r\n  property: string;\r\n  value: T;\r\n  previousValue: T;\r\n}\r\n\r\nexport interface IDisposer {\r\n  dispose: () => void;\r\n}\r\n\r\nexport class EventEmitter<T extends ISenpaiEvent> {\r\n  public callbacks: Array<EventCallback<T>> = [];\r\n  public clear() {\r\n    this.callbacks = [];\r\n  }\r\n  public listen(callback: EventCallback<T>): IDisposer {\r\n    this.callbacks.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        if (this.callbacks.includes(callback)) {\r\n          this.callbacks.splice(\r\n            this.callbacks.indexOf(callback),\r\n            1,\r\n          );\r\n        }\r\n      },\r\n    };\r\n  }\r\n  public promise(): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      const disposer = this.listen((event) => {\r\n        disposer.dispose();\r\n        resolve(event);\r\n      });\r\n    });\r\n  }\r\n  public once(callback: EventCallback<T>): IDisposer {\r\n    const disposer = this.listen((events: T) => {\r\n      callback(events);\r\n      disposer.dispose();\r\n    });\r\n    return disposer;\r\n  }\r\n\r\n  public emit(events: T): void {\r\n    for (const callback of this.callbacks.slice()) {\r\n      callback(events);\r\n    }\r\n  }\r\n}\r\n","import assert from \"assert\";\r\nimport * as eases from \"../ease\";\r\nimport { EventEmitter, IPointEvent, IValueChangeEvent } from \"../events\";\r\nimport * as m from \"../matrix\";\r\nimport { createTextureMap, IInteractionPoint, IKeyState, ISize, ISpriteSheet, ITextureMap, loadImage } from \"../util\";\r\nimport { IStage } from \"./Stage\";\r\n\r\nexport interface ISprite extends ISize {\r\n  id: string;\r\n  parent: IStage | ISprite;\r\n\r\n  // position\r\n\r\n  previousPosition: Float64Array;\r\n  position: Float64Array;\r\n  inverse: Float64Array;\r\n  alpha: number;\r\n  interpolatedAlpha: number;\r\n  previousAlpha: number;\r\n  z: number;\r\n\r\n  // animation\r\n\r\n  lastInterpolated: number;\r\n  interpolatedPosition: Float64Array;\r\n  animationStart: number;\r\n  animationLength: number;\r\n  wait: number;\r\n  // stage properties\r\n\r\n  active: boolean;\r\n  hover: boolean;\r\n  down: boolean;\r\n  cursor: \"pointer\" | \"default\";\r\n  loaded: Promise<void>;\r\n\r\n  texture: string;\r\n\r\n  // events\r\n\r\n  clickEvent: EventEmitter<IPointEvent>;\r\n  upEvent: EventEmitter<IPointEvent>;\r\n  downEvent: EventEmitter<IPointEvent>;\r\n  textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;\r\n\r\n  // this is set by the over function\r\n  ease(ratio: number): number;\r\n\r\n  broadPhase(point: IInteractionPoint): boolean;\r\n  narrowPhase(point: IInteractionPoint): ISprite;\r\n  isHovering(point: IInteractionPoint, now: number): ISprite;\r\n  pointCollision(point: IInteractionPoint): boolean;\r\n  keyStateChange(key: IKeyState): void;\r\n  setTexture(texture: string): this;\r\n  over(timespan: number, wait: number, ease: (ratio: number) => number): this;\r\n  move(position: number[] | Float64Array): this;\r\n  setZ(z: number): this;\r\n  setAlpha(alpha: number): this;\r\n  interpolate(now: number): void;\r\n  skipAnimation(now: number): boolean;\r\n  update(): void;\r\n  render(ctx: CanvasRenderingContext2D): void;\r\n\r\n  /*\r\n  emit(event: string, ...args: any[]): boolean;\r\n\r\n  on(event: \"point-move\", callback: (sprite: ISprite, point: IInteractionPoint) => void);\r\n  on(event: string, callback: () => void): this;\r\n\r\n  on(event: \"point-move\", callback: (sprite: ISprite, point: IInteractionPoint) => void);\r\n  once(event: string, callback: () => void): this;\r\n\r\n  removeAllListeners(event: string | symbol): this;\r\n  eventNames(): Array<string | symbol>;\r\n  */\r\n}\r\n\r\nexport interface ISpriteProps {\r\n  id: string;\r\n  position: Float64Array | number[];\r\n  textures?: ITextureMap;\r\n  alpha?: number;\r\n  z?: number;\r\n  source: Promise<Response>;\r\n  definition: ISpriteSheet;\r\n}\r\n\r\nexport class Sprite implements ISprite {\r\n  public id: string = \"\";\r\n  public position: Float64Array = new Float64Array(6);\r\n  public previousPosition: Float64Array = new Float64Array(6);\r\n  public interpolatedPosition: Float64Array = new Float64Array(6);\r\n  public inverse: Float64Array = new Float64Array(6);\r\n  public alpha: number = 1;\r\n  public interpolatedAlpha: number = 1;\r\n  public previousAlpha: number = 1;\r\n  public z: number = 0;\r\n  public parent: ISprite = null;\r\n  public wait: number = 0;\r\n\r\n  public lastInterpolated: number = 0;\r\n  public animationStart: number = 0;\r\n  public ease = eases.easeLinear;\r\n  public cursor: (\"pointer\" | \"default\") = \"default\";\r\n  public animationLength: number = 0;\r\n  public active: boolean = false;\r\n  public hover: boolean = false;\r\n  public down: boolean = false;\r\n  public textures: ITextureMap = {};\r\n  public texture: string;\r\n  public loaded: Promise<void> = null;\r\n\r\n  public width: number = 0;\r\n  public height: number = 0;\r\n\r\n  public clickEvent: EventEmitter<IPointEvent> = new EventEmitter<IPointEvent>();\r\n  public downEvent: EventEmitter<IPointEvent> = new EventEmitter<IPointEvent>();\r\n  public upEvent: EventEmitter<IPointEvent> = new EventEmitter<IPointEvent>();\r\n  public textureChangeEvent: EventEmitter<IValueChangeEvent<string>> = new EventEmitter<IValueChangeEvent<string>>();\r\n\r\n  constructor(props: ISpriteProps) {\r\n    this.id = props.id;\r\n    const position = props.position || m.Identity;\r\n    this.textures = props.textures ? props.textures : this.textures;\r\n    m.set(this.position, position);\r\n    m.set(this.previousPosition, position);\r\n    m.set(this.interpolatedPosition, position);\r\n\r\n    if (props.hasOwnProperty(\"alpha\")) {\r\n      this.previousAlpha = this.alpha = this.interpolatedAlpha = props.alpha;\r\n    }\r\n    if (props.hasOwnProperty(\"z\")) {\r\n      this.z = props.z;\r\n    }\r\n    this.loaded = props.source ? this.loadTexture(props.source, props.definition) : Promise.resolve();\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    return point.tx >= 0 && point.tx <= this.width && point.ty >= 0 && point.ty <= this.height;\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    return true;\r\n  }\r\n\r\n  public isHovering(point: IInteractionPoint, now: number): ISprite {\r\n    this.interpolate(now);\r\n    m.transformPoint(point, this.inverse);\r\n    if (this.broadPhase(point)) {\r\n      return this.narrowPhase(point);\r\n    }\r\n  }\r\n\r\n  public move(position: number[] | Float64Array): this {\r\n    this.previousPosition[0] = this.interpolatedPosition[0];\r\n    this.previousPosition[1] = this.interpolatedPosition[1];\r\n    this.previousPosition[2] = this.interpolatedPosition[2];\r\n    this.previousPosition[3] = this.interpolatedPosition[3];\r\n    this.previousPosition[4] = this.interpolatedPosition[4];\r\n    this.previousPosition[5] = this.interpolatedPosition[5];\r\n\r\n    this.position[0] = position[0];\r\n    this.position[1] = position[1];\r\n    this.position[2] = position[2];\r\n    this.position[3] = position[3];\r\n    this.position[4] = position[4];\r\n    this.position[5] = position[5];\r\n    return this;\r\n  }\r\n\r\n  public setAlpha(alpha: number): this {\r\n    this.previousAlpha = this.interpolatedAlpha;\r\n    this.alpha = alpha;\r\n    return this;\r\n  }\r\n\r\n  public setZ(z: number): this {\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  public over(timespan: number, wait: number = 0, ease: (ratio: number) => number = this.ease): this {\r\n    this.animationLength = timespan;\r\n    this.animationStart = Date.now();\r\n    this.ease = ease || this.ease;\r\n    this.wait = wait;\r\n    return this;\r\n  }\r\n\r\n  public keyStateChange(key: IKeyState): void {\r\n    throw new Error(\"Not implemented.\");\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = now < this.animationLength + this.animationStart;\r\n    this.animationStart = now - this.animationLength;\r\n    return result;\r\n  }\r\n\r\n  public update(): void {\r\n    // No op\r\n  }\r\n  public interpolate(now: number): void {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    this.lastInterpolated = now;\r\n\r\n    const progress = now - (this.animationStart + this.wait);\r\n\r\n    const ratio = (progress >= this.animationLength)\r\n        ? 1\r\n        : (progress <= 0 ? 0 : this.ease(progress / this.animationLength));\r\n\r\n    if (ratio === 1) {\r\n      this.interpolatedPosition[0] = this.position[0];\r\n      this.interpolatedPosition[1] = this.position[1];\r\n      this.interpolatedPosition[2] = this.position[2];\r\n      this.interpolatedPosition[3] = this.position[3];\r\n      this.interpolatedPosition[4] = this.position[4];\r\n      this.interpolatedPosition[5] = this.position[5];\r\n      this.interpolatedAlpha = this.alpha;\r\n    } else if (ratio === 0) {\r\n      this.interpolatedPosition[0] = this.previousPosition[0];\r\n      this.interpolatedPosition[1] = this.previousPosition[1];\r\n      this.interpolatedPosition[2] = this.previousPosition[2];\r\n      this.interpolatedPosition[3] = this.previousPosition[3];\r\n      this.interpolatedPosition[4] = this.previousPosition[4];\r\n      this.interpolatedPosition[5] = this.previousPosition[5];\r\n      this.interpolatedAlpha = this.previousAlpha;\r\n    } else {\r\n      for (let j = 0; j < 6; j++) {\r\n        this.interpolatedPosition[j] = this.previousPosition[j]\r\n          + ratio * (this.position[j] - this.previousPosition[j]);\r\n      }\r\n      this.interpolatedAlpha = this.previousAlpha + ratio * (this.alpha - this.previousAlpha);\r\n    }\r\n\r\n    m.inverse(this.interpolatedPosition, this.inverse);\r\n\r\n    if (this.parent) {\r\n      this.parent.interpolate(now);\r\n\r\n      m.chain(this.parent.inverse, true)\r\n        .transform(this.inverse)\r\n        .set(this.inverse);\r\n    }\r\n  }\r\n  public setTexture(texture: string): this {\r\n    const oldTexture = this.texture;\r\n    this.texture = texture;\r\n    this.width = this.textures[this.texture].width;\r\n    this.height = this.textures[this.texture].height;\r\n\r\n    if (oldTexture !== this.texture) {\r\n      // this.emit(\"texture-change\", this.texture); // TODO\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures[this.texture], 0, 0);\r\n  }\r\n\r\n  private async loadTexture(res: Promise<Response>, definition: ISpriteSheet): Promise<void> {\r\n    const resp = await res;\r\n    const blob = await resp.blob();\r\n    this.textures = await createTextureMap(definition, createImageBitmap(blob));\r\n  }\r\n}\r\n\r\nexport interface ILoadSpriteProps extends ISpriteProps {\r\n\r\n}\r\n","import { createTextureMap,  ITextureMap, loadImage, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nimport assert from \"assert\";\r\n\r\nexport interface IButton extends ISprite {\r\n  selected: boolean;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  text: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface IButtonProps extends ISpriteProps {\r\n  selected?: boolean;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  text?: string;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Button extends Sprite implements IButton {\r\n  public selected: boolean = false;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public text: string =  \"\";\r\n  public textAlign: TextAlign = TextAlign.center;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n\r\n  constructor(props: IButtonProps) {\r\n    super(props);\r\n    this.selected = props.selected || false;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.text = props.text || this.text;\r\n    this.textAlign = props.textAlign;\r\n    this.textBaseline = props.textBaseline;\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const selected = this.selected ? \"Selected\" : \"Unselected\";\r\n    this.setTexture(`${active}_${hover}_${selected}`);\r\n\r\n    this.cursor = this.hover ? \"pointer\" : \"default\";\r\n    super.update();\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.textures[this.texture].width * 0.5, this.textures[this.texture].height * 0.5);\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    ctx.textAlign = TextAlign.center;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport interface ILoadButtonProps extends IButtonProps {\r\n\r\n}\r\n","import assert from \"assert\";\r\nimport { createTextureMap, loadImage } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICharacterProps extends ISpriteProps {\r\n  name: string;\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport interface ICharacter extends ISprite {\r\n  name: string;\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport class Character extends Sprite implements ICharacter {\r\n  public name: string = \"\";\r\n  public displayName: string = \"\";\r\n  public color: string = \"\";\r\n  constructor(props: ICharacterProps) {\r\n    super(props);\r\n    this.name = props.name;\r\n    this.displayName = props.displayName;\r\n    this.color = props.color;\r\n  }\r\n}\r\n\r\nexport interface ILoadCharacterProps extends ICharacterProps {\r\n\r\n}\r\n","import assert from \"assert\";\r\nimport { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport {\r\n  createTextureMap,\r\n  IInteractionPoint,\r\n  ITextureMap,\r\n  loadImage,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICheckbox extends ISprite {\r\n  checked: boolean;\r\n  text: string;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  toggleEvent: EventEmitter<IValueChangeEvent<boolean>>;\r\n\r\n  setText(text: string): this;\r\n  toggle(): this;\r\n}\r\n\r\nexport interface ICheckboxProps extends ISpriteProps {\r\n  checked?: boolean;\r\n  text?: string;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Checkbox extends Sprite implements ICheckbox {\r\n  public checked: boolean = false;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n  public toggleEvent: EventEmitter<IValueChangeEvent<boolean>> = new EventEmitter<IValueChangeEvent<boolean>>();\r\n\r\n  constructor(props: ICheckboxProps) {\r\n    super(props);\r\n    this.checked = Boolean(props.checked) || false;\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n  }\r\n\r\n  public toggle(): this {\r\n    this.checked = !this.checked;\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    if (point.clicked && point.active === this) {\r\n      this.toggle();\r\n      // this.emit(\"toggle\", point); // TODO\r\n    }\r\n    return super.pointCollision(point);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.width * 1.1, this.height / 2);\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const checked = this.checked ? \"Checked\" : \"Unchecked\";\r\n    this.setTexture(`${active}_${hover}_${checked}`);\r\n\r\n    this.cursor = this.hover ? \"pointer\" : \"default\";\r\n    super.update();\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport interface ILoadCheckboxProps extends ICheckboxProps {\r\n\r\n}\r\n","import assert from \"assert\";\r\nimport { createTextureMap, ITextureMap, loadImage } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IClose extends ISprite {\r\n\r\n}\r\n\r\nexport interface ICloseProps extends ISpriteProps {\r\n\r\n}\r\n\r\nexport class Close extends Sprite implements IClose {\r\n  constructor(props: ICloseProps) {\r\n    super(props);\r\n  }\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    this.setTexture(`${active}_${hover}`);\r\n\r\n    this.cursor = this.hover ? \"pointer\" : \"default\";\r\n    super.update();\r\n  }\r\n}\r\n\r\nexport interface ILoadCloseProps extends ICloseProps {\r\n\r\n}\r\n","import { IInteractionPoint, IPlayable } from \"../util\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\ntype ICallback = (...args: any[]) => any;\r\n\r\nexport interface IContainer {\r\n  sprites: ISprite[];\r\n  playables: IPlayable[];\r\n  points: IInteractionPoint[];\r\n  audioContext: AudioContext;\r\n\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  addPlayable(sprite: IPlayable): this;\r\n  removePlayable(sprite: IPlayable): this;\r\n  addPoint(point: IInteractionPoint): this;\r\n  removePoint(point: IInteractionPoint): this;\r\n\r\n}\r\n\r\nexport interface IContainerProps {\r\n  audioContext: AudioContext;\r\n}\r\n\r\nexport class Container implements IContainer {\r\n\r\n  public sprites: ISprite[] = [];\r\n  public playables: IPlayable[] = [];\r\n  public points: IInteractionPoint[] = [];\r\n  public audioContext: AudioContext = null;\r\n\r\n  constructor(props: IContainerProps) {\r\n    this.audioContext = props.audioContext || new AudioContext();\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    if (!this.sprites.includes(sprite)) {\r\n      this.sprites.push(sprite);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPlayable(sprite: IPlayable): this {\r\n    if (!this.playables.includes(sprite)) {\r\n      this.playables.push(sprite);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.connect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePlayable(sprite: IPlayable): this {\r\n    if (this.playables.includes(sprite)) {\r\n      this.playables.splice(this.playables.indexOf(sprite), 1);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.disconnect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPoint(point: IInteractionPoint): this {\r\n    if (!this.points.includes(point)) {\r\n      this.points.push(point);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePoint(point: IInteractionPoint): this {\r\n    if (this.points.includes(point)) {\r\n      this.points.splice(this.points.indexOf(point), 1);\r\n    }\r\n    return this;\r\n  }\r\n}\r\n","import { transformPoint } from \"../matrix\";\r\nimport { IInteractionPoint, zSort } from \"../util\";\r\nimport { Container, IContainer, IContainerProps } from \"./Container\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\ninterface IInteractionPointIndex {\r\n  [id: number]: IInteractionPoint;\r\n}\r\n\r\nexport interface IInteractionManager extends IContainer {\r\n  canvas: HTMLCanvasElement;\r\n  mousePoint: IInteractionPoint;\r\n  touchPointIndex: IInteractionPointIndex;\r\n\r\n  hookEvents(): void;\r\n  dispose(): void;\r\n  createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint;\r\n  addTouchPoint(touch: Touch): IInteractionPoint;\r\n  removeTouchPoint(touch: Touch): void;\r\n  pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n\r\n  // high level events\r\n  mouseDown(event: MouseEvent): void;\r\n  mouseUp(event: MouseEvent): void;\r\n  mouseMove(event: MouseEvent): void;\r\n  touchStart(event: TouchEvent): void;\r\n  touchEnd(event: TouchEvent): void;\r\n  touchMove(event: TouchEvent): void;\r\n  touchCancel(event: TouchEvent): void;\r\n}\r\n\r\ninterface IInteractionPointEvent {\r\n  target: HTMLElement;\r\n  event: string;\r\n  listener: (e: MouseEvent | TouchEvent) => void;\r\n}\r\n\r\nexport interface IInteractionManagerProps extends IContainerProps {\r\n  canvas: HTMLCanvasElement;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class InteractionManager extends Container implements IInteractionManager {\r\n  public canvas: HTMLCanvasElement = null;\r\n  public ctx: CanvasRenderingContext2D = null;\r\n  public touchPointIndex: IInteractionPointIndex = {};\r\n  public mousePoint: IInteractionPoint = {\r\n    active: null,\r\n    captured: false,\r\n    clicked: false,\r\n    down: false,\r\n    firstDown: false,\r\n    hover: null,\r\n    id: \"mouse\",\r\n    tx: 0,\r\n    ty: 0,\r\n    type: \"Mouse\",\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n  private events: IInteractionPointEvent[] = [\r\n    { target: null, event: \"mousedown\", listener: e => this.mouseDown(e as MouseEvent) },\r\n    { target: document.body, event: \"mouseup\", listener: e => this.mouseUp(e as MouseEvent) },\r\n    { target: null, event: \"mousemove\", listener: e => this.mouseMove(e as MouseEvent) },\r\n    { target: null, event: \"touchstart\", listener: e => this.touchStart(e as TouchEvent) },\r\n    { target: document.body, event: \"touchend\", listener: e => this.touchEnd(e as TouchEvent) },\r\n    { target: null, event: \"touchmove\", listener: e => this.touchMove(e as TouchEvent) },\r\n    { target: document.body, event: \"touchcancel\", listener: e => this.touchCancel(e as TouchEvent) },\r\n  ];\r\n\r\n  constructor(props: IInteractionManagerProps) {\r\n    super(props);\r\n    this.canvas = props.canvas;\r\n    if (!this.canvas) {\r\n      this.canvas = document.createElement(\"canvas\");\r\n      document.body.appendChild(this.canvas);\r\n    }\r\n    this.canvas.width = props.width;\r\n    this.canvas.height = props.height;\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.hookEvents();\r\n    this.addPoint(this.mousePoint);\r\n  }\r\n\r\n  public hookEvents(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public dispose(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .removeEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public mouseDown(event: MouseEvent): void {\r\n    return this.pointDown(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseUp(event: MouseEvent): void {\r\n    return this.pointUp(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseMove(event: MouseEvent): void {\r\n    return this.pointMove(this.mousePoint, event);\r\n  }\r\n\r\n  public touchStart(event: TouchEvent): void {\r\n    let touch: Touch;\r\n    let point: IInteractionPoint;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      point = this.addTouchPoint(touch);\r\n      this.pointDown(point, touch);\r\n    }\r\n  }\r\n\r\n  public touchEnd(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointUp(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchCancel(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointCancel(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchMove(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointMove(point, touch);\r\n    }\r\n  }\r\n  public pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const alreadyDown = point.down;\r\n    if (!alreadyDown) {\r\n       point.down = true;\r\n       point.firstDown = true;\r\n    }\r\n    this.pointMove(point, position);\r\n    if (alreadyDown) {\r\n      return;\r\n    }\r\n    if (point.hover) {\r\n      point.active = point.hover;\r\n      point.active.down = true;\r\n      point.active.active = true;\r\n      // point.active.emit(\"down\", point); // TODO\r\n    }\r\n    // this.emit(\"point-down\", point); // TODO\r\n    point.firstDown = false; // after this point, the point will not be considered \"just recently pressed\"\r\n  }\r\n\r\n  public pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    this.pointMove(point, position);\r\n    if (!point.down) {\r\n      return;\r\n    }\r\n    point.down = false;\r\n    if (point.active) {\r\n      point.active.down = false;\r\n      point.active.active = false;\r\n      // point.active.emit(\"up\", point); // TODO\r\n      if (point.hover === point.active) {\r\n        // point.active.emit(\"click\", point); // TODO\r\n      }\r\n      point.active = null;\r\n    }\r\n    // super.emit(\"point-up\", point); // TODO\r\n    // super.emit(\"click\", point); // TODO\r\n  }\r\n\r\n  public pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const now = Date.now();\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    point.x = position.clientX - rect.left;\r\n    point.y = position.clientY - rect.top;\r\n\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n    // sprites sorted by ascending z level\r\n    // REASON: Higher z levels are drawn last, so forward-iterating through the\r\n    // array and drawing the sprites will yield the correct result.\r\n    this.sprites.sort(zSort);\r\n\r\n    // find the highest z level sprite the point collides with\r\n    // loop is reversed due to z levels being sorted ascendingly\r\n    let sprite: ISprite;\r\n    let hoveringSprite: ISprite;\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n      hoveringSprite = sprite.isHovering(point, now);\r\n\r\n      if (hoveringSprite) {\r\n        hoveringSprite.hover = true;\r\n        point.hover = hoveringSprite; // this can later be used by pointDown and pointUp\r\n        hoveringSprite.pointCollision(point);\r\n        // hoveringSprite.emit(\"point-move\", point); // TODO\r\n        break; // we've found the highest z level sprite the point collides with\r\n      }\r\n    }\r\n\r\n    // super.emit(\"point-move\", point); // TODO\r\n  }\r\n\r\n  public pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    if (point.active) {\r\n      point.active.active = false;\r\n      point.active = null;\r\n    }\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n  }\r\n\r\n  public createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint {\r\n    const point: IInteractionPoint = {\r\n      active: null,\r\n      captured: false,\r\n      clicked: false,\r\n      down: false,\r\n      firstDown: false,\r\n      hover: null,\r\n      id,\r\n      tx: 0,\r\n      ty: 0,\r\n      type,\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n\r\n    return point;\r\n  }\r\n\r\n  public addTouchPoint(touch: Touch): IInteractionPoint {\r\n    const point = this.createInteractionPoint(touch.identifier.toString(), \"Touch\");\r\n    this.addPoint(point);\r\n    this.touchPointIndex[touch.identifier] = point;\r\n    return point;\r\n  }\r\n\r\n  public removeTouchPoint(touch: Touch): void {\r\n    const point: IInteractionPoint = this.touchPointIndex[touch.identifier];\r\n    delete this.touchPointIndex[touch.identifier];\r\n    this.removePoint(point);\r\n  }\r\n\r\n  public hoverCheck(now: number): void {\r\n    let point: IInteractionPoint;\r\n    let sprite: ISprite;\r\n\r\n    for (point of this.points) {\r\n      if (point.hover) {\r\n        point.hover.hover = false;\r\n        point.hover = null;\r\n      }\r\n\r\n      for (sprite of this.sprites) {\r\n        if (sprite.isHovering(point, now)) {\r\n          sprite.pointCollision(point);\r\n          point.hover = sprite;\r\n          sprite.hover = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ILabel extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ILabelProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class Label extends Sprite implements ILabel {\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public textAlign: TextAlign = TextAlign.start;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n\r\n  constructor(props: ILabelProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n  }\r\n\r\n  public update(): void {\r\n    this.height = this.fontSize;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    this.width = tempctx.measureText(this.text).width;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.translate(this.textures[this.texture].width * 0.5, this.textures[this.texture].height * 0.5);\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import assert from \"assert\";\r\nimport { transformPoint } from \"../matrix\";\r\nimport { createTextureMap, IInteractionPoint, ITextureMap, loadImage } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst sortZ = (a: ISprite, b: ISprite): number => a.z - b.z;\r\n\r\nexport interface IPanel extends ISprite {\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n}\r\n\r\nexport interface IPanelProps extends ISpriteProps {\r\n  sprites?: ISprite[];\r\n}\r\n\r\nexport class Panel extends Sprite implements IPanel {\r\n  private sprites: ISprite[] = [];\r\n\r\n  constructor(props: IPanelProps) {\r\n    super(props);\r\n    this.sprites = props.sprites || this.sprites;\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    sprite.parent = this;\r\n    this.sprites.push(sprite);\r\n    return this;\r\n  }\r\n\r\n  public interpolate(now: number) {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    super.interpolate(now);\r\n    for (const sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.parent = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    this.sprites.sort(sortZ);\r\n\r\n    for (const sprite of this.sprites) {\r\n      sprite.down = false;\r\n      sprite.hover = false;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    let sprite: ISprite = null;\r\n    let collision: ISprite = null;\r\n\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n\r\n      // the sprites inverse has already been calculated relative to the parent\r\n      transformPoint(point, sprite.inverse);\r\n\r\n      if (!sprite.broadPhase(point)) {\r\n        continue;\r\n      }\r\n\r\n      collision = sprite.narrowPhase(point);\r\n      if (collision) {\r\n        return collision;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  public update(): void {\r\n    this.hover = false;\r\n    for (const sprite of this.sprites) {\r\n      sprite.update();\r\n\r\n      if (sprite.hover) {\r\n        this.hover = sprite.hover;\r\n        this.cursor = sprite.cursor;\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(0, 0, this.width, this.height);\r\n    ctx.clip();\r\n\r\n    for (const sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.transform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha *= sprite.interpolatedAlpha;\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    let result: boolean = super.skipAnimation(now);\r\n    for (const sprite of this.sprites) {\r\n      result = sprite.skipAnimation(now) || result;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ILoadPanelProps extends IPanelProps {\r\n\r\n}\r\n","import {IAudio, IAudioProps, ISoundSpriteSheet, PlayState } from \"../util\";\r\n\r\nexport interface ISFX extends IAudio {\r\n  loop: false; // it will always be false\r\n}\r\n\r\nexport interface ISFXProps extends IAudioProps {\r\n}\r\n\r\nexport interface ILoadSFXProps {\r\n  name: string;\r\n  texture: string;\r\n}\r\n\r\nexport class SFXSprite implements ISFX {\r\n\r\n  // fields from IPlayable\r\n  public started: number = 0;\r\n  public length: number = 0;\r\n  public start: number = 0;\r\n  public end: number = 0;\r\n  public loop: false = false;\r\n  public state: PlayState = PlayState.Stopped; // unused\r\n  public loaded: Promise<void>;\r\n\r\n  // fields from IAudio\r\n  public gain: GainNode;\r\n  public source: AudioBuffer;\r\n  public destination: AudioNode;\r\n  public definition: ISoundSpriteSheet;\r\n  public context: AudioContext;\r\n  /**\r\n   * 1. sets all relevant metadata properties from spritesheet\r\n   * 2. creates gain node from context\r\n   * 3. set this.loaded to result of createSource(props.source, props.context);\r\n   * 4. set this.destination\r\n   */\r\n  constructor(props: ISFXProps) {\r\n    // TODO: 1\r\n    this.context = props.context;\r\n    this.definition = props.definition;\r\n    this.start = this.definition.spritemap[props.texture].start;\r\n    this.end = this.definition.spritemap[props.texture].end;\r\n    this.length = this.end - this.start;\r\n    this.gain = props.context.createGain();\r\n    this.loaded = this.createSource(props.source, props.context);\r\n    this.destination = props.context.destination;\r\n  }\r\n\r\n  // calls this.loaded.then(e => this.createPlayInstance());\r\n  public play(): this {\r\n    this.loaded.then(e => this.createPlayInstance());\r\n    return this;\r\n  }\r\n\r\n  // no ops\r\n  public stop(): this {\r\n    return this;\r\n  }\r\n  public pause(): this {\r\n    return this;\r\n  }\r\n\r\n  // sets the gainNode.gain.value property\r\n  // accepts [0..1]\r\n  public setVolume(volume: number): this {\r\n    if (volume < 0 || volume > 1) {\r\n      throw new Error(`setVolume() accepts a number between 0 and 1; got ${volume}.`);\r\n    }\r\n    this.gain.gain.value = volume;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 1. resolves response to arrayBuffer\r\n   * 2. creates audioBuffer\r\n   * 3. creates AudioBufferSourceNode\r\n   * 4. sets source property\r\n   */\r\n  private async createSource(res: Promise<Response>, context: AudioContext): Promise<void> {\r\n    const resp: Response = await res;\r\n    const buffer = await resp.arrayBuffer();\r\n    this.source = await context.decodeAudioData(buffer);\r\n  }\r\n\r\n  /**\r\n   * 1. creates new AudioBufferSourceNode\r\n   * 2. set node.buffer = this.source\r\n   * 3. set source metadata\r\n   * 4. connect node to destination\r\n   * 5. call start(0, offset, duration)\r\n   * 6. listen to ended event (look up the event)\r\n   * 7. clean up audio source node and disconnect it from the destination\r\n   */\r\n  private createPlayInstance(): void {\r\n    const node = this.context.createBufferSource();\r\n    node.buffer = this.source;\r\n    node.loop = this.loop; // false\r\n    // TODO: 3\r\n    node.connect(this.gain);\r\n\r\n    const now = Date.now();\r\n    node.start(0, this.start, this.length);\r\n\r\n    const gain = this.gain; // must be accessed inside of named function\r\n    node.addEventListener(\"ended\", function callback(e) {\r\n      node.disconnect(gain);\r\n      node.removeEventListener(\"ended\", callback);\r\n    });\r\n  }\r\n}\r\n","import assert from \"assert\";\r\nimport { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport { createTextureMap, IInteractionPoint, ITextureMap, loadImage } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ISlider extends ISprite {\r\n  value: number;\r\n  max: number;\r\n  min: number;\r\n  width: number;\r\n\r\n  valueChangeEvent: EventEmitter<IValueChangeEvent<number>>;\r\n}\r\n\r\nexport interface ISliderProps extends ISpriteProps {\r\n  value?: number;\r\n  max?: number;\r\n  min?: number;\r\n  width: number;\r\n}\r\n\r\nexport class Slider extends Sprite implements ISlider {\r\n  public value: number = 0;\r\n  public max: number = 1;\r\n  public min: number = 0;\r\n  public width: number = 100;\r\n\r\n  public valueChangeEvent: EventEmitter<IValueChangeEvent<number>> = new EventEmitter<IValueChangeEvent<number>>();\r\n\r\n  private sliderPattern: CanvasPattern = null;\r\n  private pillTexture: ImageBitmap = null;\r\n\r\n  constructor(props: ISliderProps) {\r\n    super(props);\r\n\r\n    this.height = props.textures.Pill_Hover.height;\r\n    this.width = props.width;\r\n    this.max = props.max || this.max;\r\n    this.min = props.min || this.min;\r\n    this.value = props.value || this.value;\r\n\r\n    this.sliderPattern = document\r\n      .createElement(\"canvas\")\r\n      .getContext(\"2d\")\r\n      // @ts-ignore: Dom Spec Outdated. ImageBitmap is acceptable parameter for createPattern.\r\n      .createPattern(props.textures.Line, \"repeat-x\");\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    if (this.active) {\r\n      return true;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    if (this.active || point.firstDown) {\r\n      return this;\r\n    }\r\n\r\n    /*\r\n     * NOTE: this checks if the cursor is strictly hovering over the pill\r\n     */\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    if (point.ty <= this.textures.Pill_Hover.height\r\n        && point.ty >= 0\r\n        && point.tx >= valueX\r\n        && point.tx <= valueX + this.textures.Pill_Hover.width) {\r\n        return this;\r\n      }\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    super.pointCollision(point);\r\n\r\n    if (this.active && point.active === this) {\r\n      const previousValue = this.value;\r\n      const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n      const trueTX = point.tx - this.textures.Pill_Hover.width * 0.5;\r\n      const clampedTX = Math.max(0, Math.min(trueTX, sliderDistance));\r\n      const range = this.max - this.min;\r\n\r\n      this.value = this.min + range * clampedTX / sliderDistance;\r\n      if (this.value !== previousValue) {\r\n        // super.emit(\"value-change\", this); // TODO\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public update(): void {\r\n    this.cursor = this.hover ? \"pointer\" : \"default\";\r\n    this.pillTexture = this.active\r\n      ? this.textures.Pill_Active\r\n      : (this.hover ? this.textures.Pill_Hover : this.textures.Pill);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures.Line_Cap_Left, 0, 0);\r\n    ctx.drawImage(\r\n      this.textures.Line_Cap_Right,\r\n      this.width - this.textures.Line_Cap_Right.width,\r\n      0,\r\n    );\r\n    ctx.fillStyle = this.sliderPattern;\r\n    ctx.fillRect(\r\n      this.textures.Line_Cap_Left.width,\r\n      0,\r\n      this.width - this.textures.Line_Cap_Left.width - this.textures.Line_Cap_Right.width,\r\n      this.textures.Line.height,\r\n    );\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    ctx.drawImage(this.pillTexture, valueX, 0);\r\n  }\r\n}\r\n\r\nexport interface ILoadSliderProps extends ISliderProps {\r\n\r\n}\r\n","import { IContainer } from \"./Container\";\r\nimport { IInteractionManagerProps, InteractionManager } from \"./InteractionManager\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IStageProps extends IInteractionManagerProps {\r\n\r\n}\r\n\r\nexport interface IStage extends IContainer {\r\n  update(): this;\r\n  render(): this;\r\n  skipAnimations(): boolean;\r\n}\r\n\r\nexport class Stage extends InteractionManager implements IStage {\r\n  constructor(props: IStageProps) {\r\n    super(props);\r\n  }\r\n  public update(): this {\r\n    const now = Date.now();\r\n    let sprite: ISprite;\r\n\r\n    // TODO: implement super.emit(\"pre-interpolate\");\r\n    for (sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n    // TODO: implment super.emit(\"post-interpolate\");\r\n\r\n    // TODO: implement super.emit(\"pre-hover-check\");\r\n    this.hoverCheck(now);\r\n    // TODO: implement super.emit(\"post-hover-check\");\r\n\r\n    // TODO: implement super.emit(\"pre-update\");\r\n    for (sprite of this.sprites) {\r\n      sprite.update();\r\n    }\r\n    // TODO: implement super.emit(\"post-update\");\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(): this {\r\n    // TODO: implement super.emit(\"pre-render\");\r\n    let sprite: ISprite;\r\n    let pointer: boolean = false;\r\n    const ctx = this.ctx;\r\n\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    for (sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.setTransform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha = sprite.interpolatedPosition[6];\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n      pointer = pointer || (sprite.hover && sprite.cursor === \"pointer\");\r\n    }\r\n\r\n    this.canvas.style.cursor = pointer ? \"pointer\" : \"default\";\r\n\r\n    // TODO: implement super.emit(\"post-render\");\r\n    return this;\r\n  }\r\n\r\n  public skipAnimations(): boolean {\r\n    const now = Date.now();\r\n    let result = false;\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.skipAnimation(now)) {\r\n        result = true;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import assert from \"assert\";\r\nimport { createTextureMap, IPadding, ITextureMap, loadImage, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport interface ITextbox extends ISprite {\r\n  text: string;\r\n  textSpeed: number;\r\n  textIndex: number;\r\n  padding: IPadding;\r\n  fontSize: number;\r\n  font: string;\r\n  fontColor: string;\r\n  lineHeight: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  setText(text: string): this;\r\n  appendText(text: string): this;\r\n}\r\n\r\nexport interface ITextboxProps extends ISpriteProps {\r\n  text?: string;\r\n  textSpeed?: number;\r\n  textIndex?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n  padding?: IPadding;\r\n  fontSize?: number;\r\n  font?: string;\r\n  fontColor?: string;\r\n  lineHeight?: number;\r\n}\r\n\r\nexport class Textbox extends Sprite implements ITextbox {\r\n  private static regex: RegExp = /\\r\\n|\\r|\\n|[^\\t ]*[\\t ]?/g;\r\n\r\n  public text: string = \"\";\r\n  public textSpeed: number = 1;\r\n  public textIndex: number = 0;\r\n  public padding: IPadding = {\r\n    bottom: 5,\r\n    left: 5,\r\n    right: 5,\r\n    top: 5,\r\n  };\r\n  public fontSize: number = 12;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public lineHeight: number = 16;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n  private interpolatedText: string[] = [\"\"];\r\n\r\n  constructor(props: ITextboxProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.textSpeed = props.textSpeed || this.textSpeed;\r\n    if (props.hasOwnProperty(\"textIndex\")) {\r\n      this.textIndex = props.textIndex;\r\n    }\r\n    this.padding = props.padding || this.padding;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.lineHeight = props.lineHeight || this.lineHeight;\r\n\r\n    this.setTexture(\"Texture\");\r\n  }\r\n\r\n  public update() {\r\n    const maxWidth = this.textures[this.texture].width - this.padding.left - this.padding.right;\r\n    this.textIndex = Math.min(this.text.length, this.textIndex + this.textSpeed);\r\n    const words = this.text.match(Textbox.regex);\r\n    this.interpolatedText = [\"\"];\r\n    const maxLines = (this.textures[this.texture].height - this.padding.top - this.padding.bottom) / this.lineHeight;\r\n    let line: string = \"\";\r\n    let lineIndex: number = 0;\r\n    let measurement: TextMetrics;\r\n    let leftOver: number = this.textIndex;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n\r\n    for (const word of words) {\r\n\r\n      // If the next character is a newline, push a new line\r\n      if (word === \"\\n\" || word === \"\\r\\n\" || word === \"\\r\") {\r\n        this.interpolatedText.push(\"\");\r\n        leftOver -= word.length;\r\n        lineIndex += 1;\r\n        continue;\r\n      }\r\n\r\n      line = this.interpolatedText[lineIndex];\r\n\r\n      // If there are no more characters to push, break\r\n      if (leftOver === 0) {\r\n        break;\r\n      }\r\n\r\n      // If the line count is greater than the maximum number of lines, break\r\n      if ((lineIndex + 1) > maxLines) {\r\n        break;\r\n      }\r\n\r\n      // Test the word length\r\n      line += word;\r\n      measurement = tempctx.measureText(line);\r\n\r\n      // If the line overflows\r\n      if (measurement.width > maxWidth) {\r\n        lineIndex = this.interpolatedText.push(\"\") - 1;\r\n      }\r\n\r\n      this.interpolatedText[lineIndex] += word;\r\n      // Add the text to the screen\r\n\r\n      leftOver -= word.length;\r\n\r\n      if (leftOver < 0) {\r\n        this.interpolatedText[lineIndex] = this.interpolatedText[lineIndex].slice(0, leftOver);\r\n        break;\r\n      }\r\n      // Check to see if the word overFlows the animation\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D) {\r\n    super.render(ctx);\r\n    const maxHeight = this.textures[this.texture].height - this.padding.top;\r\n    let currentHeight = this.padding.top;\r\n\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.bottom,\r\n      this.width - this.padding.right,\r\n      this.height - this.padding.top,\r\n    );\r\n    ctx.clip();\r\n    for (const line of this.interpolatedText) {\r\n      if (currentHeight + this.fontSize > maxHeight) {\r\n        break;\r\n      }\r\n\r\n      ctx.fillText(line, this.padding.left, currentHeight);\r\n      currentHeight += this.lineHeight;\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    if (text.startsWith(this.text)) {\r\n      this.text = text;\r\n      return this;\r\n    }\r\n\r\n    this.text = text;\r\n    this.interpolatedText = [\"\"];\r\n    this.textIndex = 0;\r\n    return this;\r\n  }\r\n\r\n  public appendText(text: string): this {\r\n    this.text += text;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = super.skipAnimation(now) && this.textIndex < this.text.length;\r\n    this.textIndex = this.text.length;\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ILoadTextboxProps extends ITextboxProps {\r\n\r\n}\r\n","import { TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ITextInput extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  caretIndex: number;\r\n  caretX: number;\r\n  selection: [number, number];\r\n  textScroll: number;\r\n  padding: [number, number, number, number];\r\n  frameCount: number;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ITextInputProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class TextInput extends Sprite implements ITextInput {\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public caretIndex: number = 0;\r\n  public caretX: number = 0;\r\n  public selection: [number, number] = [0, 0];\r\n  public textScroll: number = 0;\r\n  public padding: [number, number, number, number] = [2, 2, 2, 2];\r\n  public frameCount: number = 0;\r\n  private showCaret: boolean = true;\r\n\r\n  constructor(props: ITextInputProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.width = props.width || this.width;\r\n    this.height = props.height || this.height;\r\n  }\r\n\r\n  public update(): void {\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    const textWidth: number = tempctx.measureText(this.text).width;\r\n    this.caretX = tempctx.measureText(this.text.slice(0, this.caretIndex)).width;\r\n    const relativeCaretX: number = this.caretX + this.textScroll;\r\n    const maxTextWidth: number  = this.width - this.padding[0] - this.padding[1];\r\n\r\n    if (relativeCaretX < 0) {\r\n      console.log(\"hit less than 0\");\r\n      this.textScroll += relativeCaretX;\r\n    } else if (relativeCaretX > maxTextWidth) {\r\n      console.log(\"hit greater than\");\r\n      this.textScroll -= relativeCaretX - maxTextWidth;\r\n    }\r\n\r\n    this.frameCount += 1;\r\n    if (this.frameCount >= 30) {\r\n      this.frameCount = 0;\r\n      this.showCaret = !this.showCaret;\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(0, 0, this.width, this.height);\r\n\r\n    // clip\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding[0],\r\n      this.padding[2],\r\n      this.width - this.padding[1] - this.padding[0],\r\n      this.width - this.padding[3],\r\n    );\r\n    ctx.clip();\r\n\r\n    // draw text\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textBaseline = TextBaseline.top;\r\n    ctx.fillText(this.text, this.textScroll + this.padding[0], 0);\r\n\r\n    if (this.showCaret) {\r\n      const caretX = this.textScroll + this.padding[0] + this.caretIndex;\r\n      ctx.beginPath();\r\n      ctx.moveTo(caretX, this.padding[2]);\r\n      ctx.lineTo(caretX, this.height - this.padding[3]);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n"],"names":["PI","Math","TAU","inFunc","ratio","outFunc","inverse","easeLinear","easeInQuad","easeOutQuad","easeInOutQuad","inOut","easeInCub","easeOutCub","easeInOutCub","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutSin","sin","easeInSin","easeInOutSin","easeOutElastic","pow","p","easeInElastic","easeInOutElastic","value","immutable","this","Float64Array","Identity","Matrix","x","y","m","translate","scale","angle","rotate","skewX","skewY","props","transform","chain","reset","target","set","matrix","setMatrix","a","b","c","d","e","f","det","IdentityMatrix","cos","tan","pa","pb","pc","pd","pe","pf","ma","mb","mc","md","me","mf","point","tx","ty","source","i","length","TextAlign","TextBaseline","PlayState","points","points_1","tslib_1.__values","transformPoint","definition","img","textures","Promise","all","Object","entries","frames","map","_a","_b","desc","frame","_c","_d","_e","createImageBitmap","_f","w","h","left","right","z","src","fetch","blob","EventEmitter","callbacks","callback","push","dispose","_this","includes","splice","indexOf","resolve","reject","disposer","listen","event","events","slice","eases.easeLinear","id","position","m.Identity","m.set","previousPosition","interpolatedPosition","hasOwnProperty","previousAlpha","alpha","interpolatedAlpha","loaded","loadTexture","Sprite","width","height","now","interpolate","m.transformPoint","broadPhase","narrowPhase","timespan","wait","ease","animationLength","animationStart","Date","key","Error","result","lastInterpolated","progress","j","m.inverse","parent","m.chain","texture","ctx","drawImage","res","createTextureMap","_super","center","middle","selected","font","fontColor","fontSize","text","textAlign","textBaseline","tslib_1.__extends","Button","setTexture","active","hover","cursor","update","render","fillStyle","fillText","name","displayName","color","checked","Boolean","Checkbox","clicked","toggle","pointCollision","Close","audioContext","AudioContext","Container","sprite","sprites","playables","captured","down","firstDown","type","listener","mouseDown","document","body","mouseUp","mouseMove","touchStart","touchEnd","touchMove","touchCancel","canvas","createElement","appendChild","getContext","hookEvents","addPoint","mousePoint","InteractionManager","forEach","addEventListener","removeEventListener","pointDown","pointUp","pointMove","touch","changedTouches","addTouchPoint","touchPointIndex","identifier","removeTouchPoint","pointCancel","alreadyDown","hoveringSprite","rect","getBoundingClientRect","clientX","clientY","top","sort","zSort","isHovering","createInteractionPoint","toString","removePoint","tempctx","start","hanging","Label","measureText","sortZ","Panel","collision","beginPath","clip","save","globalAlpha","restore","skipAnimation","Stopped","context","spritemap","end","gain","createGain","createSource","destination","SFXSprite","then","createPlayInstance","volume","arrayBuffer","buffer","decodeAudioData","node","createBufferSource","loop","connect","disconnect","Pill_Hover","max","min","sliderPattern","createPattern","Line","Slider","valueX","sliderDistance","clampedTX","pillTexture","Pill_Active","Pill","Line_Cap_Left","Line_Cap_Right","fillRect","Stage","hoverCheck","pointer","clearRect","setTransform","style","bottom","textSpeed","textIndex","padding","lineHeight","Textbox","maxWidth","words","match","regex","interpolatedText","maxLines","line","lineIndex","leftOver","words_1","word","maxHeight","currentHeight","startsWith","TextInput","caretX","caretIndex","relativeCaretX","textScroll","maxTextWidth","console","log","frameCount","showCaret","lineWidth","strokeRect","moveTo","lineTo","stroke"],"mappings":"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"}